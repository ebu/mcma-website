### YamlMime:ManagedReference
items:
- uid: Mcma.Aws.DynamoDb.DynamoDbTableBuilder
  commentId: T:Mcma.Aws.DynamoDb.DynamoDbTableBuilder
  id: DynamoDbTableBuilder
  parent: Mcma.Aws.DynamoDb
  children:
  - Mcma.Aws.DynamoDb.DynamoDbTableBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddAttributeMapping``1
  - Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddAttributeMapping``1(System.String,System.Func{System.String,System.String,``0,System.Object})
  - Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddCustomQueryBuilder``2
  langs:
  - csharp
  - vb
  name: DynamoDbTableBuilder
  nameWithType: DynamoDbTableBuilder
  fullName: Mcma.Aws.DynamoDb.DynamoDbTableBuilder
  type: Class
  source:
    remote:
      path: AWS/Mcma.Aws.DynamoDb/DynamoDbTableBuilder.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: DynamoDbTableBuilder
    path: ../mcma-libraries-dotnet/AWS/Mcma.Aws.DynamoDb/DynamoDbTableBuilder.cs
    startLine: 7
  assemblies:
  - Mcma.Aws.DynamoDb
  namespace: Mcma.Aws.DynamoDb
  syntax:
    content: public class DynamoDbTableBuilder
    content.vb: Public Class DynamoDbTableBuilder
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Mcma.Serialization.McmaJson.ToMcmaJson(System.Boolean)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Mcma.Aws.DynamoDb.DynamoDbTableBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Mcma.Aws.DynamoDb.DynamoDbTableBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: '#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)'
  parent: Mcma.Aws.DynamoDb.DynamoDbTableBuilder
  langs:
  - csharp
  - vb
  name: DynamoDbTableBuilder(IServiceCollection)
  nameWithType: DynamoDbTableBuilder.DynamoDbTableBuilder(IServiceCollection)
  fullName: Mcma.Aws.DynamoDb.DynamoDbTableBuilder.DynamoDbTableBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Constructor
  source:
    remote:
      path: AWS/Mcma.Aws.DynamoDb/DynamoDbTableBuilder.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: .ctor
    path: ../mcma-libraries-dotnet/AWS/Mcma.Aws.DynamoDb/DynamoDbTableBuilder.cs
    startLine: 9
  assemblies:
  - Mcma.Aws.DynamoDb
  namespace: Mcma.Aws.DynamoDb
  syntax:
    content: public DynamoDbTableBuilder(IServiceCollection services)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: Public Sub New(services As IServiceCollection)
  overload: Mcma.Aws.DynamoDb.DynamoDbTableBuilder.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddCustomQueryBuilder``2
  commentId: M:Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddCustomQueryBuilder``2
  id: AddCustomQueryBuilder``2
  parent: Mcma.Aws.DynamoDb.DynamoDbTableBuilder
  langs:
  - csharp
  - vb
  name: AddCustomQueryBuilder<TParameters, TCustomQueryBuilder>()
  nameWithType: DynamoDbTableBuilder.AddCustomQueryBuilder<TParameters, TCustomQueryBuilder>()
  fullName: Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddCustomQueryBuilder<TParameters, TCustomQueryBuilder>()
  type: Method
  source:
    remote:
      path: AWS/Mcma.Aws.DynamoDb/DynamoDbTableBuilder.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: AddCustomQueryBuilder
    path: ../mcma-libraries-dotnet/AWS/Mcma.Aws.DynamoDb/DynamoDbTableBuilder.cs
    startLine: 16
  assemblies:
  - Mcma.Aws.DynamoDb
  namespace: Mcma.Aws.DynamoDb
  syntax:
    content: >-
      public DynamoDbTableBuilder AddCustomQueryBuilder<TParameters, TCustomQueryBuilder>()
          where TCustomQueryBuilder : class, ICustomQueryBuilder<TParameters, QueryOperationConfig>
    typeParameters:
    - id: TParameters
    - id: TCustomQueryBuilder
    return:
      type: Mcma.Aws.DynamoDb.DynamoDbTableBuilder
    content.vb: Public Function AddCustomQueryBuilder(Of TParameters, TCustomQueryBuilder As {Class, ICustomQueryBuilder(Of TParameters, QueryOperationConfig)}) As DynamoDbTableBuilder
  overload: Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddCustomQueryBuilder*
  nameWithType.vb: DynamoDbTableBuilder.AddCustomQueryBuilder(Of TParameters, TCustomQueryBuilder)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddCustomQueryBuilder(Of TParameters, TCustomQueryBuilder)()
  name.vb: AddCustomQueryBuilder(Of TParameters, TCustomQueryBuilder)()
- uid: Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddAttributeMapping``1
  commentId: M:Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddAttributeMapping``1
  id: AddAttributeMapping``1
  parent: Mcma.Aws.DynamoDb.DynamoDbTableBuilder
  langs:
  - csharp
  - vb
  name: AddAttributeMapping<TAttributeMapping>()
  nameWithType: DynamoDbTableBuilder.AddAttributeMapping<TAttributeMapping>()
  fullName: Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddAttributeMapping<TAttributeMapping>()
  type: Method
  source:
    remote:
      path: AWS/Mcma.Aws.DynamoDb/DynamoDbTableBuilder.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: AddAttributeMapping
    path: ../mcma-libraries-dotnet/AWS/Mcma.Aws.DynamoDb/DynamoDbTableBuilder.cs
    startLine: 23
  assemblies:
  - Mcma.Aws.DynamoDb
  namespace: Mcma.Aws.DynamoDb
  syntax:
    content: >-
      public DynamoDbTableBuilder AddAttributeMapping<TAttributeMapping>()
          where TAttributeMapping : class, IAttributeMapping
    typeParameters:
    - id: TAttributeMapping
    return:
      type: Mcma.Aws.DynamoDb.DynamoDbTableBuilder
    content.vb: Public Function AddAttributeMapping(Of TAttributeMapping As {Class, IAttributeMapping}) As DynamoDbTableBuilder
  overload: Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddAttributeMapping*
  nameWithType.vb: DynamoDbTableBuilder.AddAttributeMapping(Of TAttributeMapping)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddAttributeMapping(Of TAttributeMapping)()
  name.vb: AddAttributeMapping(Of TAttributeMapping)()
- uid: Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddAttributeMapping``1(System.String,System.Func{System.String,System.String,``0,System.Object})
  commentId: M:Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddAttributeMapping``1(System.String,System.Func{System.String,System.String,``0,System.Object})
  id: AddAttributeMapping``1(System.String,System.Func{System.String,System.String,``0,System.Object})
  parent: Mcma.Aws.DynamoDb.DynamoDbTableBuilder
  langs:
  - csharp
  - vb
  name: AddAttributeMapping<TResource>(String, Func<String, String, TResource, Object>)
  nameWithType: DynamoDbTableBuilder.AddAttributeMapping<TResource>(String, Func<String, String, TResource, Object>)
  fullName: Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddAttributeMapping<TResource>(System.String, System.Func<System.String, System.String, TResource, System.Object>)
  type: Method
  source:
    remote:
      path: AWS/Mcma.Aws.DynamoDb/DynamoDbTableBuilder.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: AddAttributeMapping
    path: ../mcma-libraries-dotnet/AWS/Mcma.Aws.DynamoDb/DynamoDbTableBuilder.cs
    startLine: 29
  assemblies:
  - Mcma.Aws.DynamoDb
  namespace: Mcma.Aws.DynamoDb
  syntax:
    content: public DynamoDbTableBuilder AddAttributeMapping<TResource>(string name, Func<string, string, TResource, object> get)
    parameters:
    - id: name
      type: System.String
    - id: get
      type: System.Func{System.String,System.String,{TResource},System.Object}
    typeParameters:
    - id: TResource
    return:
      type: Mcma.Aws.DynamoDb.DynamoDbTableBuilder
    content.vb: Public Function AddAttributeMapping(Of TResource)(name As String, get As Func(Of String, String, TResource, Object)) As DynamoDbTableBuilder
  overload: Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddAttributeMapping*
  nameWithType.vb: DynamoDbTableBuilder.AddAttributeMapping(Of TResource)(String, Func(Of String, String, TResource, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddAttributeMapping(Of TResource)(System.String, System.Func(Of System.String, System.String, TResource, System.Object))
  name.vb: AddAttributeMapping(Of TResource)(String, Func(Of String, String, TResource, Object))
references:
- uid: Mcma.Aws.DynamoDb
  commentId: N:Mcma.Aws.DynamoDb
  name: Mcma.Aws.DynamoDb
  nameWithType: Mcma.Aws.DynamoDb
  fullName: Mcma.Aws.DynamoDb
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Mcma.Serialization.McmaJson.ToMcmaJson(System.Boolean)
  commentId: M:Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
  parent: Mcma.Serialization.McmaJson
  definition: Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
  name: ToMcmaJson(Boolean)
  nameWithType: McmaJson.ToMcmaJson(Boolean)
  fullName: Mcma.Serialization.McmaJson.ToMcmaJson(System.Boolean)
  spec.csharp:
  - uid: Mcma.Serialization.McmaJson.ToMcmaJson(System.Boolean)
    name: ToMcmaJson
    nameWithType: McmaJson.ToMcmaJson
    fullName: Mcma.Serialization.McmaJson.ToMcmaJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mcma.Serialization.McmaJson.ToMcmaJson(System.Boolean)
    name: ToMcmaJson
    nameWithType: McmaJson.ToMcmaJson
    fullName: Mcma.Serialization.McmaJson.ToMcmaJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
  commentId: M:Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
  isExternal: true
  name: ToMcmaJson(Object, Boolean)
  nameWithType: McmaJson.ToMcmaJson(Object, Boolean)
  fullName: Mcma.Serialization.McmaJson.ToMcmaJson(System.Object, System.Boolean)
  spec.csharp:
  - uid: Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
    name: ToMcmaJson
    nameWithType: McmaJson.ToMcmaJson
    fullName: Mcma.Serialization.McmaJson.ToMcmaJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
    name: ToMcmaJson
    nameWithType: McmaJson.ToMcmaJson
    fullName: Mcma.Serialization.McmaJson.ToMcmaJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.Serialization.McmaJson
  commentId: T:Mcma.Serialization.McmaJson
  parent: Mcma.Serialization
  name: McmaJson
  nameWithType: McmaJson
  fullName: Mcma.Serialization.McmaJson
- uid: Mcma.Serialization
  commentId: N:Mcma.Serialization
  name: Mcma.Serialization
  nameWithType: Mcma.Serialization
  fullName: Mcma.Serialization
- uid: Mcma.Aws.DynamoDb.DynamoDbTableBuilder.#ctor*
  commentId: Overload:Mcma.Aws.DynamoDb.DynamoDbTableBuilder.#ctor
  name: DynamoDbTableBuilder
  nameWithType: DynamoDbTableBuilder.DynamoDbTableBuilder
  fullName: Mcma.Aws.DynamoDb.DynamoDbTableBuilder.DynamoDbTableBuilder
- uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceCollection
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddCustomQueryBuilder*
  commentId: Overload:Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddCustomQueryBuilder
  name: AddCustomQueryBuilder
  nameWithType: DynamoDbTableBuilder.AddCustomQueryBuilder
  fullName: Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddCustomQueryBuilder
- uid: Mcma.Aws.DynamoDb.DynamoDbTableBuilder
  commentId: T:Mcma.Aws.DynamoDb.DynamoDbTableBuilder
  parent: Mcma.Aws.DynamoDb
  name: DynamoDbTableBuilder
  nameWithType: DynamoDbTableBuilder
  fullName: Mcma.Aws.DynamoDb.DynamoDbTableBuilder
- uid: Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddAttributeMapping*
  commentId: Overload:Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddAttributeMapping
  name: AddAttributeMapping
  nameWithType: DynamoDbTableBuilder.AddAttributeMapping
  fullName: Mcma.Aws.DynamoDb.DynamoDbTableBuilder.AddAttributeMapping
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Func{System.String,System.String,{TResource},System.Object}
  commentId: T:System.Func{System.String,System.String,`0,System.Object}
  parent: System
  definition: System.Func`4
  name: Func<String, String, TResource, Object>
  nameWithType: Func<String, String, TResource, Object>
  fullName: System.Func<System.String, System.String, TResource, System.Object>
  nameWithType.vb: Func(Of String, String, TResource, Object)
  fullName.vb: System.Func(Of System.String, System.String, TResource, System.Object)
  name.vb: Func(Of String, String, TResource, Object)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
