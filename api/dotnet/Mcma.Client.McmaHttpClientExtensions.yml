### YamlMime:ManagedReference
items:
- uid: Mcma.Client.McmaHttpClientExtensions
  commentId: T:Mcma.Client.McmaHttpClientExtensions
  id: McmaHttpClientExtensions
  parent: Mcma.Client
  children:
  - Mcma.Client.McmaHttpClientExtensions.GetAsync``1(Mcma.Client.McmaHttpClient,System.String,System.Boolean,System.Threading.CancellationToken)
  - Mcma.Client.McmaHttpClientExtensions.PostAsync(Mcma.Client.McmaHttpClient,System.String,System.Object,System.Threading.CancellationToken)
  - Mcma.Client.McmaHttpClientExtensions.PostAsync``1(Mcma.Client.McmaHttpClient,System.String,System.Object,System.Threading.CancellationToken)
  - Mcma.Client.McmaHttpClientExtensions.PutAsync(Mcma.Client.McmaHttpClient,System.String,System.Object,System.Threading.CancellationToken)
  - Mcma.Client.McmaHttpClientExtensions.PutAsync``1(Mcma.Client.McmaHttpClient,System.String,System.Object,System.Threading.CancellationToken)
  - Mcma.Client.McmaHttpClientExtensions.WithErrorHandling(System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage})
  langs:
  - csharp
  - vb
  name: McmaHttpClientExtensions
  nameWithType: McmaHttpClientExtensions
  fullName: Mcma.Client.McmaHttpClientExtensions
  type: Class
  source:
    remote:
      path: Base/Mcma.Client/Http/McmaHttpClientExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: McmaHttpClientExtensions
    path: ../mcma-libraries-dotnet/Base/Mcma.Client/Http/McmaHttpClientExtensions.cs
    startLine: 8
  assemblies:
  - Mcma.Client
  namespace: Mcma.Client
  syntax:
    content: public static class McmaHttpClientExtensions
    content.vb: Public Module McmaHttpClientExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Mcma.Client.McmaHttpClientExtensions.WithErrorHandling(System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage})
  commentId: M:Mcma.Client.McmaHttpClientExtensions.WithErrorHandling(System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage})
  id: WithErrorHandling(System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage})
  isExtensionMethod: true
  parent: Mcma.Client.McmaHttpClientExtensions
  langs:
  - csharp
  - vb
  name: WithErrorHandling(Task<HttpResponseMessage>)
  nameWithType: McmaHttpClientExtensions.WithErrorHandling(Task<HttpResponseMessage>)
  fullName: Mcma.Client.McmaHttpClientExtensions.WithErrorHandling(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>)
  type: Method
  source:
    remote:
      path: Base/Mcma.Client/Http/McmaHttpClientExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: WithErrorHandling
    path: ../mcma-libraries-dotnet/Base/Mcma.Client/Http/McmaHttpClientExtensions.cs
    startLine: 10
  assemblies:
  - Mcma.Client
  namespace: Mcma.Client
  syntax:
    content: public static Task<HttpResponseMessage> WithErrorHandling(this Task<HttpResponseMessage> responseTask)
    parameters:
    - id: responseTask
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithErrorHandling(responseTask As Task(Of HttpResponseMessage)) As Task(Of HttpResponseMessage)
  overload: Mcma.Client.McmaHttpClientExtensions.WithErrorHandling*
  nameWithType.vb: McmaHttpClientExtensions.WithErrorHandling(Task(Of HttpResponseMessage))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mcma.Client.McmaHttpClientExtensions.WithErrorHandling(System.Threading.Tasks.Task(Of System.Net.Http.HttpResponseMessage))
  name.vb: WithErrorHandling(Task(Of HttpResponseMessage))
- uid: Mcma.Client.McmaHttpClientExtensions.GetAsync``1(Mcma.Client.McmaHttpClient,System.String,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Mcma.Client.McmaHttpClientExtensions.GetAsync``1(Mcma.Client.McmaHttpClient,System.String,System.Boolean,System.Threading.CancellationToken)
  id: GetAsync``1(Mcma.Client.McmaHttpClient,System.String,System.Boolean,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Mcma.Client.McmaHttpClientExtensions
  langs:
  - csharp
  - vb
  name: GetAsync<T>(McmaHttpClient, String, Boolean, CancellationToken)
  nameWithType: McmaHttpClientExtensions.GetAsync<T>(McmaHttpClient, String, Boolean, CancellationToken)
  fullName: Mcma.Client.McmaHttpClientExtensions.GetAsync<T>(Mcma.Client.McmaHttpClient, System.String, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Base/Mcma.Client/Http/McmaHttpClientExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: GetAsync
    path: ../mcma-libraries-dotnet/Base/Mcma.Client/Http/McmaHttpClientExtensions.cs
    startLine: 13
  assemblies:
  - Mcma.Client
  namespace: Mcma.Client
  syntax:
    content: public static Task<T> GetAsync<T>(this McmaHttpClient mcmaHttpClient, string url, bool nullOn404 = false, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: mcmaHttpClient
      type: Mcma.Client.McmaHttpClient
    - id: url
      type: System.String
    - id: nullOn404
      type: System.Boolean
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetAsync(Of T)(mcmaHttpClient As McmaHttpClient, url As String, nullOn404 As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Mcma.Client.McmaHttpClientExtensions.GetAsync*
  nameWithType.vb: McmaHttpClientExtensions.GetAsync(Of T)(McmaHttpClient, String, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mcma.Client.McmaHttpClientExtensions.GetAsync(Of T)(Mcma.Client.McmaHttpClient, System.String, System.Boolean, System.Threading.CancellationToken)
  name.vb: GetAsync(Of T)(McmaHttpClient, String, Boolean, CancellationToken)
- uid: Mcma.Client.McmaHttpClientExtensions.PostAsync(Mcma.Client.McmaHttpClient,System.String,System.Object,System.Threading.CancellationToken)
  commentId: M:Mcma.Client.McmaHttpClientExtensions.PostAsync(Mcma.Client.McmaHttpClient,System.String,System.Object,System.Threading.CancellationToken)
  id: PostAsync(Mcma.Client.McmaHttpClient,System.String,System.Object,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Mcma.Client.McmaHttpClientExtensions
  langs:
  - csharp
  - vb
  name: PostAsync(McmaHttpClient, String, Object, CancellationToken)
  nameWithType: McmaHttpClientExtensions.PostAsync(McmaHttpClient, String, Object, CancellationToken)
  fullName: Mcma.Client.McmaHttpClientExtensions.PostAsync(Mcma.Client.McmaHttpClient, System.String, System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Base/Mcma.Client/Http/McmaHttpClientExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: PostAsync
    path: ../mcma-libraries-dotnet/Base/Mcma.Client/Http/McmaHttpClientExtensions.cs
    startLine: 24
  assemblies:
  - Mcma.Client
  namespace: Mcma.Client
  syntax:
    content: public static Task PostAsync(this McmaHttpClient mcmaHttpClient, string url, object body, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: mcmaHttpClient
      type: Mcma.Client.McmaHttpClient
    - id: url
      type: System.String
    - id: body
      type: System.Object
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PostAsync(mcmaHttpClient As McmaHttpClient, url As String, body As Object, cancellationToken As CancellationToken = Nothing) As Task
  overload: Mcma.Client.McmaHttpClientExtensions.PostAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mcma.Client.McmaHttpClientExtensions.PostAsync``1(Mcma.Client.McmaHttpClient,System.String,System.Object,System.Threading.CancellationToken)
  commentId: M:Mcma.Client.McmaHttpClientExtensions.PostAsync``1(Mcma.Client.McmaHttpClient,System.String,System.Object,System.Threading.CancellationToken)
  id: PostAsync``1(Mcma.Client.McmaHttpClient,System.String,System.Object,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Mcma.Client.McmaHttpClientExtensions
  langs:
  - csharp
  - vb
  name: PostAsync<T>(McmaHttpClient, String, Object, CancellationToken)
  nameWithType: McmaHttpClientExtensions.PostAsync<T>(McmaHttpClient, String, Object, CancellationToken)
  fullName: Mcma.Client.McmaHttpClientExtensions.PostAsync<T>(Mcma.Client.McmaHttpClient, System.String, System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Base/Mcma.Client/Http/McmaHttpClientExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: PostAsync
    path: ../mcma-libraries-dotnet/Base/Mcma.Client/Http/McmaHttpClientExtensions.cs
    startLine: 33
  assemblies:
  - Mcma.Client
  namespace: Mcma.Client
  syntax:
    content: public static Task<T> PostAsync<T>(this McmaHttpClient mcmaHttpClient, string url, object body, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: mcmaHttpClient
      type: Mcma.Client.McmaHttpClient
    - id: url
      type: System.String
    - id: body
      type: System.Object
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PostAsync(Of T)(mcmaHttpClient As McmaHttpClient, url As String, body As Object, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Mcma.Client.McmaHttpClientExtensions.PostAsync*
  nameWithType.vb: McmaHttpClientExtensions.PostAsync(Of T)(McmaHttpClient, String, Object, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mcma.Client.McmaHttpClientExtensions.PostAsync(Of T)(Mcma.Client.McmaHttpClient, System.String, System.Object, System.Threading.CancellationToken)
  name.vb: PostAsync(Of T)(McmaHttpClient, String, Object, CancellationToken)
- uid: Mcma.Client.McmaHttpClientExtensions.PutAsync(Mcma.Client.McmaHttpClient,System.String,System.Object,System.Threading.CancellationToken)
  commentId: M:Mcma.Client.McmaHttpClientExtensions.PutAsync(Mcma.Client.McmaHttpClient,System.String,System.Object,System.Threading.CancellationToken)
  id: PutAsync(Mcma.Client.McmaHttpClient,System.String,System.Object,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Mcma.Client.McmaHttpClientExtensions
  langs:
  - csharp
  - vb
  name: PutAsync(McmaHttpClient, String, Object, CancellationToken)
  nameWithType: McmaHttpClientExtensions.PutAsync(McmaHttpClient, String, Object, CancellationToken)
  fullName: Mcma.Client.McmaHttpClientExtensions.PutAsync(Mcma.Client.McmaHttpClient, System.String, System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Base/Mcma.Client/Http/McmaHttpClientExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: PutAsync
    path: ../mcma-libraries-dotnet/Base/Mcma.Client/Http/McmaHttpClientExtensions.cs
    startLine: 44
  assemblies:
  - Mcma.Client
  namespace: Mcma.Client
  syntax:
    content: public static Task PutAsync(this McmaHttpClient mcmaHttpClient, string url, object body, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: mcmaHttpClient
      type: Mcma.Client.McmaHttpClient
    - id: url
      type: System.String
    - id: body
      type: System.Object
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PutAsync(mcmaHttpClient As McmaHttpClient, url As String, body As Object, cancellationToken As CancellationToken = Nothing) As Task
  overload: Mcma.Client.McmaHttpClientExtensions.PutAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mcma.Client.McmaHttpClientExtensions.PutAsync``1(Mcma.Client.McmaHttpClient,System.String,System.Object,System.Threading.CancellationToken)
  commentId: M:Mcma.Client.McmaHttpClientExtensions.PutAsync``1(Mcma.Client.McmaHttpClient,System.String,System.Object,System.Threading.CancellationToken)
  id: PutAsync``1(Mcma.Client.McmaHttpClient,System.String,System.Object,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Mcma.Client.McmaHttpClientExtensions
  langs:
  - csharp
  - vb
  name: PutAsync<T>(McmaHttpClient, String, Object, CancellationToken)
  nameWithType: McmaHttpClientExtensions.PutAsync<T>(McmaHttpClient, String, Object, CancellationToken)
  fullName: Mcma.Client.McmaHttpClientExtensions.PutAsync<T>(Mcma.Client.McmaHttpClient, System.String, System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Base/Mcma.Client/Http/McmaHttpClientExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: PutAsync
    path: ../mcma-libraries-dotnet/Base/Mcma.Client/Http/McmaHttpClientExtensions.cs
    startLine: 50
  assemblies:
  - Mcma.Client
  namespace: Mcma.Client
  syntax:
    content: public static Task<T> PutAsync<T>(this McmaHttpClient mcmaHttpClient, string url, object body, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: mcmaHttpClient
      type: Mcma.Client.McmaHttpClient
    - id: url
      type: System.String
    - id: body
      type: System.Object
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PutAsync(Of T)(mcmaHttpClient As McmaHttpClient, url As String, body As Object, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Mcma.Client.McmaHttpClientExtensions.PutAsync*
  nameWithType.vb: McmaHttpClientExtensions.PutAsync(Of T)(McmaHttpClient, String, Object, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mcma.Client.McmaHttpClientExtensions.PutAsync(Of T)(Mcma.Client.McmaHttpClient, System.String, System.Object, System.Threading.CancellationToken)
  name.vb: PutAsync(Of T)(McmaHttpClient, String, Object, CancellationToken)
references:
- uid: Mcma.Client
  commentId: N:Mcma.Client
  name: Mcma.Client
  nameWithType: Mcma.Client
  fullName: Mcma.Client
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mcma.Client.McmaHttpClientExtensions.WithErrorHandling*
  commentId: Overload:Mcma.Client.McmaHttpClientExtensions.WithErrorHandling
  name: WithErrorHandling
  nameWithType: McmaHttpClientExtensions.WithErrorHandling
  fullName: Mcma.Client.McmaHttpClientExtensions.WithErrorHandling
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  commentId: T:System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  nameWithType.vb: Task(Of HttpResponseMessage)
  fullName.vb: System.Threading.Tasks.Task(Of System.Net.Http.HttpResponseMessage)
  name.vb: Task(Of HttpResponseMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Mcma.Client.McmaHttpClientExtensions.GetAsync*
  commentId: Overload:Mcma.Client.McmaHttpClientExtensions.GetAsync
  name: GetAsync
  nameWithType: McmaHttpClientExtensions.GetAsync
  fullName: Mcma.Client.McmaHttpClientExtensions.GetAsync
- uid: Mcma.Client.McmaHttpClient
  commentId: T:Mcma.Client.McmaHttpClient
  parent: Mcma.Client
  name: McmaHttpClient
  nameWithType: McmaHttpClient
  fullName: Mcma.Client.McmaHttpClient
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Mcma.Client.McmaHttpClientExtensions.PostAsync*
  commentId: Overload:Mcma.Client.McmaHttpClientExtensions.PostAsync
  name: PostAsync
  nameWithType: McmaHttpClientExtensions.PostAsync
  fullName: Mcma.Client.McmaHttpClientExtensions.PostAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Mcma.Client.McmaHttpClientExtensions.PutAsync*
  commentId: Overload:Mcma.Client.McmaHttpClientExtensions.PutAsync
  name: PutAsync
  nameWithType: McmaHttpClientExtensions.PutAsync
  fullName: Mcma.Client.McmaHttpClientExtensions.PutAsync
