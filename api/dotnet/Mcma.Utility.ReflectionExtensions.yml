### YamlMime:ManagedReference
items:
- uid: Mcma.Utility.ReflectionExtensions
  commentId: T:Mcma.Utility.ReflectionExtensions
  id: ReflectionExtensions
  parent: Mcma.Utility
  children:
  - Mcma.Utility.ReflectionExtensions.HasImplicitConversionTo(System.Type,System.Type)
  - Mcma.Utility.ReflectionExtensions.HasImplicitConversionTo``1(System.Type)
  langs:
  - csharp
  - vb
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: Mcma.Utility.ReflectionExtensions
  type: Class
  source:
    remote:
      path: Base/Mcma.Core/Utility/ReflectionExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: ReflectionExtensions
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Utility/ReflectionExtensions.cs
    startLine: 9
  assemblies:
  - Mcma.Core
  namespace: Mcma.Utility
  summary: "\nUtility extensions for checking for implicit conversions between types\n"
  example: []
  syntax:
    content: public static class ReflectionExtensions
    content.vb: Public Module ReflectionExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Mcma.Utility.ReflectionExtensions.HasImplicitConversionTo``1(System.Type)
  commentId: M:Mcma.Utility.ReflectionExtensions.HasImplicitConversionTo``1(System.Type)
  id: HasImplicitConversionTo``1(System.Type)
  isExtensionMethod: true
  parent: Mcma.Utility.ReflectionExtensions
  langs:
  - csharp
  - vb
  name: HasImplicitConversionTo<T>(Type)
  nameWithType: ReflectionExtensions.HasImplicitConversionTo<T>(Type)
  fullName: Mcma.Utility.ReflectionExtensions.HasImplicitConversionTo<T>(System.Type)
  type: Method
  source:
    remote:
      path: Base/Mcma.Core/Utility/ReflectionExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: HasImplicitConversionTo
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Utility/ReflectionExtensions.cs
    startLine: 17
  assemblies:
  - Mcma.Core
  namespace: Mcma.Utility
  summary: "\nChecks if type <see cref=\"!:from\"></see> can be implicitly converted to type <see cref=\"!:T\"></see>\n"
  example: []
  syntax:
    content: public static bool HasImplicitConversionTo<T>(this Type from)
    parameters:
    - id: from
      type: System.Type
      description: The type to convert from
    typeParameters:
    - id: T
      description: The type to convert to
    return:
      type: System.Boolean
      description: True if <see cref="!:from"></see> can be implicitly converted to <see cref="!:T"></see>; otherwise, false
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasImplicitConversionTo(Of T)(from As Type) As Boolean
  overload: Mcma.Utility.ReflectionExtensions.HasImplicitConversionTo*
  nameWithType.vb: ReflectionExtensions.HasImplicitConversionTo(Of T)(Type)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mcma.Utility.ReflectionExtensions.HasImplicitConversionTo(Of T)(System.Type)
  name.vb: HasImplicitConversionTo(Of T)(Type)
- uid: Mcma.Utility.ReflectionExtensions.HasImplicitConversionTo(System.Type,System.Type)
  commentId: M:Mcma.Utility.ReflectionExtensions.HasImplicitConversionTo(System.Type,System.Type)
  id: HasImplicitConversionTo(System.Type,System.Type)
  isExtensionMethod: true
  parent: Mcma.Utility.ReflectionExtensions
  langs:
  - csharp
  - vb
  name: HasImplicitConversionTo(Type, Type)
  nameWithType: ReflectionExtensions.HasImplicitConversionTo(Type, Type)
  fullName: Mcma.Utility.ReflectionExtensions.HasImplicitConversionTo(System.Type, System.Type)
  type: Method
  source:
    remote:
      path: Base/Mcma.Core/Utility/ReflectionExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: HasImplicitConversionTo
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Utility/ReflectionExtensions.cs
    startLine: 26
  assemblies:
  - Mcma.Core
  namespace: Mcma.Utility
  summary: "\nChecks if type <see cref=\"!:from\"></see> can be implicitly converted to type <see cref=\"!:to\"></see>\n"
  example: []
  syntax:
    content: public static bool HasImplicitConversionTo(this Type from, Type to)
    parameters:
    - id: from
      type: System.Type
      description: The type to convert from
    - id: to
      type: System.Type
      description: The type to convert to
    return:
      type: System.Boolean
      description: True if <see cref="!:from"></see> can be implicitly converted to <see cref="!:to"></see>; otherwise, false
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasImplicitConversionTo(from As Type, to As Type) As Boolean
  overload: Mcma.Utility.ReflectionExtensions.HasImplicitConversionTo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Mcma.Utility
  commentId: N:Mcma.Utility
  name: Mcma.Utility
  nameWithType: Mcma.Utility
  fullName: Mcma.Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mcma.Utility.ReflectionExtensions.HasImplicitConversionTo*
  commentId: Overload:Mcma.Utility.ReflectionExtensions.HasImplicitConversionTo
  name: HasImplicitConversionTo
  nameWithType: ReflectionExtensions.HasImplicitConversionTo
  fullName: Mcma.Utility.ReflectionExtensions.HasImplicitConversionTo
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
