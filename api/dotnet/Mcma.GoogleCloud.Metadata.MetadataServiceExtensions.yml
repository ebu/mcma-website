### YamlMime:ManagedReference
items:
- uid: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions
  commentId: T:Mcma.GoogleCloud.Metadata.MetadataServiceExtensions
  id: MetadataServiceExtensions
  parent: Mcma.GoogleCloud.Metadata
  children:
  - Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetForInstanceAsync(Mcma.GoogleCloud.Metadata.IMetadataService,System.String)
  - Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetForProjectAsync(Mcma.GoogleCloud.Metadata.IMetadataService,System.String)
  - Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetInstanceIdAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  - Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetInstanceZoneAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  - Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetKubernetesClusterNameAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  - Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetProjectIdAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  - Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleAsync(Mcma.GoogleCloud.Metadata.IMetadataService,System.String)
  - Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleForInstanceAsync(Mcma.GoogleCloud.Metadata.IMetadataService,System.String)
  - Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleForProjectAsync(Mcma.GoogleCloud.Metadata.IMetadataService,System.String)
  - Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.IsAvailableAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  - Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.IsOnKubernetesClusterAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  langs:
  - csharp
  - vb
  name: MetadataServiceExtensions
  nameWithType: MetadataServiceExtensions
  fullName: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions
  type: Class
  source:
    remote:
      path: GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: MetadataServiceExtensions
    path: ../mcma-libraries-dotnet/GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
    startLine: 5
  assemblies:
  - Mcma.GoogleCloud
  namespace: Mcma.GoogleCloud.Metadata
  syntax:
    content: public static class MetadataServiceExtensions
    content.vb: Public Module MetadataServiceExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.IsAvailableAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  commentId: M:Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.IsAvailableAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  id: IsAvailableAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  isExtensionMethod: true
  parent: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions
  langs:
  - csharp
  - vb
  name: IsAvailableAsync(IMetadataService)
  nameWithType: MetadataServiceExtensions.IsAvailableAsync(IMetadataService)
  fullName: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.IsAvailableAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  type: Method
  source:
    remote:
      path: GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: IsAvailableAsync
    path: ../mcma-libraries-dotnet/GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
    startLine: 7
  assemblies:
  - Mcma.GoogleCloud
  namespace: Mcma.GoogleCloud.Metadata
  syntax:
    content: public static Task<bool> IsAvailableAsync(this IMetadataService metadataService)
    parameters:
    - id: metadataService
      type: Mcma.GoogleCloud.Metadata.IMetadataService
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsAvailableAsync(metadataService As IMetadataService) As Task(Of Boolean)
  overload: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.IsAvailableAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleAsync(Mcma.GoogleCloud.Metadata.IMetadataService,System.String)
  commentId: M:Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleAsync(Mcma.GoogleCloud.Metadata.IMetadataService,System.String)
  id: GetSingleAsync(Mcma.GoogleCloud.Metadata.IMetadataService,System.String)
  isExtensionMethod: true
  parent: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions
  langs:
  - csharp
  - vb
  name: GetSingleAsync(IMetadataService, String)
  nameWithType: MetadataServiceExtensions.GetSingleAsync(IMetadataService, String)
  fullName: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleAsync(Mcma.GoogleCloud.Metadata.IMetadataService, System.String)
  type: Method
  source:
    remote:
      path: GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: GetSingleAsync
    path: ../mcma-libraries-dotnet/GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
    startLine: 10
  assemblies:
  - Mcma.GoogleCloud
  namespace: Mcma.GoogleCloud.Metadata
  syntax:
    content: public static Task<string> GetSingleAsync(this IMetadataService metadataService, string path)
    parameters:
    - id: metadataService
      type: Mcma.GoogleCloud.Metadata.IMetadataService
    - id: path
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetSingleAsync(metadataService As IMetadataService, path As String) As Task(Of String)
  overload: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleForInstanceAsync(Mcma.GoogleCloud.Metadata.IMetadataService,System.String)
  commentId: M:Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleForInstanceAsync(Mcma.GoogleCloud.Metadata.IMetadataService,System.String)
  id: GetSingleForInstanceAsync(Mcma.GoogleCloud.Metadata.IMetadataService,System.String)
  isExtensionMethod: true
  parent: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions
  langs:
  - csharp
  - vb
  name: GetSingleForInstanceAsync(IMetadataService, String)
  nameWithType: MetadataServiceExtensions.GetSingleForInstanceAsync(IMetadataService, String)
  fullName: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleForInstanceAsync(Mcma.GoogleCloud.Metadata.IMetadataService, System.String)
  type: Method
  source:
    remote:
      path: GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: GetSingleForInstanceAsync
    path: ../mcma-libraries-dotnet/GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
    startLine: 13
  assemblies:
  - Mcma.GoogleCloud
  namespace: Mcma.GoogleCloud.Metadata
  syntax:
    content: public static Task<string> GetSingleForInstanceAsync(this IMetadataService metadataService, string path)
    parameters:
    - id: metadataService
      type: Mcma.GoogleCloud.Metadata.IMetadataService
    - id: path
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetSingleForInstanceAsync(metadataService As IMetadataService, path As String) As Task(Of String)
  overload: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleForInstanceAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleForProjectAsync(Mcma.GoogleCloud.Metadata.IMetadataService,System.String)
  commentId: M:Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleForProjectAsync(Mcma.GoogleCloud.Metadata.IMetadataService,System.String)
  id: GetSingleForProjectAsync(Mcma.GoogleCloud.Metadata.IMetadataService,System.String)
  isExtensionMethod: true
  parent: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions
  langs:
  - csharp
  - vb
  name: GetSingleForProjectAsync(IMetadataService, String)
  nameWithType: MetadataServiceExtensions.GetSingleForProjectAsync(IMetadataService, String)
  fullName: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleForProjectAsync(Mcma.GoogleCloud.Metadata.IMetadataService, System.String)
  type: Method
  source:
    remote:
      path: GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: GetSingleForProjectAsync
    path: ../mcma-libraries-dotnet/GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
    startLine: 16
  assemblies:
  - Mcma.GoogleCloud
  namespace: Mcma.GoogleCloud.Metadata
  syntax:
    content: public static Task<string> GetSingleForProjectAsync(this IMetadataService metadataService, string path)
    parameters:
    - id: metadataService
      type: Mcma.GoogleCloud.Metadata.IMetadataService
    - id: path
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetSingleForProjectAsync(metadataService As IMetadataService, path As String) As Task(Of String)
  overload: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleForProjectAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetForInstanceAsync(Mcma.GoogleCloud.Metadata.IMetadataService,System.String)
  commentId: M:Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetForInstanceAsync(Mcma.GoogleCloud.Metadata.IMetadataService,System.String)
  id: GetForInstanceAsync(Mcma.GoogleCloud.Metadata.IMetadataService,System.String)
  isExtensionMethod: true
  parent: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions
  langs:
  - csharp
  - vb
  name: GetForInstanceAsync(IMetadataService, String)
  nameWithType: MetadataServiceExtensions.GetForInstanceAsync(IMetadataService, String)
  fullName: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetForInstanceAsync(Mcma.GoogleCloud.Metadata.IMetadataService, System.String)
  type: Method
  source:
    remote:
      path: GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: GetForInstanceAsync
    path: ../mcma-libraries-dotnet/GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
    startLine: 19
  assemblies:
  - Mcma.GoogleCloud
  namespace: Mcma.GoogleCloud.Metadata
  syntax:
    content: public static Task<string[]> GetForInstanceAsync(this IMetadataService metadataService, string path)
    parameters:
    - id: metadataService
      type: Mcma.GoogleCloud.Metadata.IMetadataService
    - id: path
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.String[]}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetForInstanceAsync(metadataService As IMetadataService, path As String) As Task(Of String())
  overload: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetForInstanceAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetForProjectAsync(Mcma.GoogleCloud.Metadata.IMetadataService,System.String)
  commentId: M:Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetForProjectAsync(Mcma.GoogleCloud.Metadata.IMetadataService,System.String)
  id: GetForProjectAsync(Mcma.GoogleCloud.Metadata.IMetadataService,System.String)
  isExtensionMethod: true
  parent: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions
  langs:
  - csharp
  - vb
  name: GetForProjectAsync(IMetadataService, String)
  nameWithType: MetadataServiceExtensions.GetForProjectAsync(IMetadataService, String)
  fullName: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetForProjectAsync(Mcma.GoogleCloud.Metadata.IMetadataService, System.String)
  type: Method
  source:
    remote:
      path: GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: GetForProjectAsync
    path: ../mcma-libraries-dotnet/GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
    startLine: 22
  assemblies:
  - Mcma.GoogleCloud
  namespace: Mcma.GoogleCloud.Metadata
  syntax:
    content: public static Task<string[]> GetForProjectAsync(this IMetadataService metadataService, string path)
    parameters:
    - id: metadataService
      type: Mcma.GoogleCloud.Metadata.IMetadataService
    - id: path
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.String[]}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetForProjectAsync(metadataService As IMetadataService, path As String) As Task(Of String())
  overload: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetForProjectAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetProjectIdAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  commentId: M:Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetProjectIdAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  id: GetProjectIdAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  isExtensionMethod: true
  parent: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions
  langs:
  - csharp
  - vb
  name: GetProjectIdAsync(IMetadataService)
  nameWithType: MetadataServiceExtensions.GetProjectIdAsync(IMetadataService)
  fullName: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetProjectIdAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  type: Method
  source:
    remote:
      path: GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: GetProjectIdAsync
    path: ../mcma-libraries-dotnet/GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
    startLine: 25
  assemblies:
  - Mcma.GoogleCloud
  namespace: Mcma.GoogleCloud.Metadata
  syntax:
    content: public static Task<string> GetProjectIdAsync(this IMetadataService metadataService)
    parameters:
    - id: metadataService
      type: Mcma.GoogleCloud.Metadata.IMetadataService
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetProjectIdAsync(metadataService As IMetadataService) As Task(Of String)
  overload: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetProjectIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetKubernetesClusterNameAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  commentId: M:Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetKubernetesClusterNameAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  id: GetKubernetesClusterNameAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  isExtensionMethod: true
  parent: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions
  langs:
  - csharp
  - vb
  name: GetKubernetesClusterNameAsync(IMetadataService)
  nameWithType: MetadataServiceExtensions.GetKubernetesClusterNameAsync(IMetadataService)
  fullName: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetKubernetesClusterNameAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  type: Method
  source:
    remote:
      path: GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: GetKubernetesClusterNameAsync
    path: ../mcma-libraries-dotnet/GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
    startLine: 28
  assemblies:
  - Mcma.GoogleCloud
  namespace: Mcma.GoogleCloud.Metadata
  syntax:
    content: public static Task<string> GetKubernetesClusterNameAsync(this IMetadataService metadataService)
    parameters:
    - id: metadataService
      type: Mcma.GoogleCloud.Metadata.IMetadataService
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetKubernetesClusterNameAsync(metadataService As IMetadataService) As Task(Of String)
  overload: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetKubernetesClusterNameAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.IsOnKubernetesClusterAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  commentId: M:Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.IsOnKubernetesClusterAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  id: IsOnKubernetesClusterAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  isExtensionMethod: true
  parent: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions
  langs:
  - csharp
  - vb
  name: IsOnKubernetesClusterAsync(IMetadataService)
  nameWithType: MetadataServiceExtensions.IsOnKubernetesClusterAsync(IMetadataService)
  fullName: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.IsOnKubernetesClusterAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  type: Method
  source:
    remote:
      path: GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: IsOnKubernetesClusterAsync
    path: ../mcma-libraries-dotnet/GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
    startLine: 31
  assemblies:
  - Mcma.GoogleCloud
  namespace: Mcma.GoogleCloud.Metadata
  syntax:
    content: public static Task<bool> IsOnKubernetesClusterAsync(this IMetadataService metadataService)
    parameters:
    - id: metadataService
      type: Mcma.GoogleCloud.Metadata.IMetadataService
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsOnKubernetesClusterAsync(metadataService As IMetadataService) As Task(Of Boolean)
  overload: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.IsOnKubernetesClusterAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetInstanceZoneAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  commentId: M:Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetInstanceZoneAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  id: GetInstanceZoneAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  isExtensionMethod: true
  parent: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions
  langs:
  - csharp
  - vb
  name: GetInstanceZoneAsync(IMetadataService)
  nameWithType: MetadataServiceExtensions.GetInstanceZoneAsync(IMetadataService)
  fullName: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetInstanceZoneAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  type: Method
  source:
    remote:
      path: GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: GetInstanceZoneAsync
    path: ../mcma-libraries-dotnet/GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
    startLine: 34
  assemblies:
  - Mcma.GoogleCloud
  namespace: Mcma.GoogleCloud.Metadata
  syntax:
    content: public static Task<string> GetInstanceZoneAsync(this IMetadataService metadataService)
    parameters:
    - id: metadataService
      type: Mcma.GoogleCloud.Metadata.IMetadataService
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetInstanceZoneAsync(metadataService As IMetadataService) As Task(Of String)
  overload: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetInstanceZoneAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetInstanceIdAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  commentId: M:Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetInstanceIdAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  id: GetInstanceIdAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  isExtensionMethod: true
  parent: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions
  langs:
  - csharp
  - vb
  name: GetInstanceIdAsync(IMetadataService)
  nameWithType: MetadataServiceExtensions.GetInstanceIdAsync(IMetadataService)
  fullName: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetInstanceIdAsync(Mcma.GoogleCloud.Metadata.IMetadataService)
  type: Method
  source:
    remote:
      path: GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: GetInstanceIdAsync
    path: ../mcma-libraries-dotnet/GoogleCloud/Mcma.GoogleCloud/Metadata/MetadataServiceExtensions.cs
    startLine: 37
  assemblies:
  - Mcma.GoogleCloud
  namespace: Mcma.GoogleCloud.Metadata
  syntax:
    content: public static Task<string> GetInstanceIdAsync(this IMetadataService metadataService)
    parameters:
    - id: metadataService
      type: Mcma.GoogleCloud.Metadata.IMetadataService
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetInstanceIdAsync(metadataService As IMetadataService) As Task(Of String)
  overload: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetInstanceIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Mcma.GoogleCloud.Metadata
  commentId: N:Mcma.GoogleCloud.Metadata
  name: Mcma.GoogleCloud.Metadata
  nameWithType: Mcma.GoogleCloud.Metadata
  fullName: Mcma.GoogleCloud.Metadata
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.IsAvailableAsync*
  commentId: Overload:Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.IsAvailableAsync
  name: IsAvailableAsync
  nameWithType: MetadataServiceExtensions.IsAvailableAsync
  fullName: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.IsAvailableAsync
- uid: Mcma.GoogleCloud.Metadata.IMetadataService
  commentId: T:Mcma.GoogleCloud.Metadata.IMetadataService
  parent: Mcma.GoogleCloud.Metadata
  name: IMetadataService
  nameWithType: IMetadataService
  fullName: Mcma.GoogleCloud.Metadata.IMetadataService
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleAsync*
  commentId: Overload:Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleAsync
  name: GetSingleAsync
  nameWithType: MetadataServiceExtensions.GetSingleAsync
  fullName: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleForInstanceAsync*
  commentId: Overload:Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleForInstanceAsync
  name: GetSingleForInstanceAsync
  nameWithType: MetadataServiceExtensions.GetSingleForInstanceAsync
  fullName: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleForInstanceAsync
- uid: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleForProjectAsync*
  commentId: Overload:Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleForProjectAsync
  name: GetSingleForProjectAsync
  nameWithType: MetadataServiceExtensions.GetSingleForProjectAsync
  fullName: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetSingleForProjectAsync
- uid: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetForInstanceAsync*
  commentId: Overload:Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetForInstanceAsync
  name: GetForInstanceAsync
  nameWithType: MetadataServiceExtensions.GetForInstanceAsync
  fullName: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetForInstanceAsync
- uid: System.Threading.Tasks.Task{System.String[]}
  commentId: T:System.Threading.Tasks.Task{System.String[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String[]>
  nameWithType: Task<String[]>
  fullName: System.Threading.Tasks.Task<System.String[]>
  nameWithType.vb: Task(Of String())
  fullName.vb: System.Threading.Tasks.Task(Of System.String())
  name.vb: Task(Of String())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetForProjectAsync*
  commentId: Overload:Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetForProjectAsync
  name: GetForProjectAsync
  nameWithType: MetadataServiceExtensions.GetForProjectAsync
  fullName: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetForProjectAsync
- uid: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetProjectIdAsync*
  commentId: Overload:Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetProjectIdAsync
  name: GetProjectIdAsync
  nameWithType: MetadataServiceExtensions.GetProjectIdAsync
  fullName: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetProjectIdAsync
- uid: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetKubernetesClusterNameAsync*
  commentId: Overload:Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetKubernetesClusterNameAsync
  name: GetKubernetesClusterNameAsync
  nameWithType: MetadataServiceExtensions.GetKubernetesClusterNameAsync
  fullName: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetKubernetesClusterNameAsync
- uid: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.IsOnKubernetesClusterAsync*
  commentId: Overload:Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.IsOnKubernetesClusterAsync
  name: IsOnKubernetesClusterAsync
  nameWithType: MetadataServiceExtensions.IsOnKubernetesClusterAsync
  fullName: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.IsOnKubernetesClusterAsync
- uid: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetInstanceZoneAsync*
  commentId: Overload:Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetInstanceZoneAsync
  name: GetInstanceZoneAsync
  nameWithType: MetadataServiceExtensions.GetInstanceZoneAsync
  fullName: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetInstanceZoneAsync
- uid: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetInstanceIdAsync*
  commentId: Overload:Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetInstanceIdAsync
  name: GetInstanceIdAsync
  nameWithType: MetadataServiceExtensions.GetInstanceIdAsync
  fullName: Mcma.GoogleCloud.Metadata.MetadataServiceExtensions.GetInstanceIdAsync
