### YamlMime:ManagedReference
items:
- uid: Mcma.Data.IDocumentDatabaseTable
  commentId: T:Mcma.Data.IDocumentDatabaseTable
  id: IDocumentDatabaseTable
  parent: Mcma.Data
  children:
  - Mcma.Data.IDocumentDatabaseTable.CreateMutexAsync(System.String,System.String,System.Nullable{System.TimeSpan})
  - Mcma.Data.IDocumentDatabaseTable.CustomQueryAsync``2(Mcma.Data.DocumentDatabase.Queries.CustomQuery{``1})
  - Mcma.Data.IDocumentDatabaseTable.DeleteAsync(System.String)
  - Mcma.Data.IDocumentDatabaseTable.GetAsync``1(System.String)
  - Mcma.Data.IDocumentDatabaseTable.PutAsync``1(System.String,``0)
  - Mcma.Data.IDocumentDatabaseTable.QueryAsync``1(Mcma.Data.DocumentDatabase.Queries.Query{``0})
  langs:
  - csharp
  - vb
  name: IDocumentDatabaseTable
  nameWithType: IDocumentDatabaseTable
  fullName: Mcma.Data.IDocumentDatabaseTable
  type: Interface
  source:
    remote:
      path: Base/Mcma.Data/DocumentDatabase/IDocumentDatabaseTable.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: IDocumentDatabaseTable
    path: ../mcma-libraries-dotnet/Base/Mcma.Data/DocumentDatabase/IDocumentDatabaseTable.cs
    startLine: 6
  assemblies:
  - Mcma.Data
  namespace: Mcma.Data
  syntax:
    content: public interface IDocumentDatabaseTable
    content.vb: Public Interface IDocumentDatabaseTable
  extensionMethods:
  - System.Object.Mcma.Serialization.McmaJson.ToMcmaJson(System.Boolean)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Mcma.Data.IDocumentDatabaseTable.QueryAsync``1(Mcma.Data.DocumentDatabase.Queries.Query{``0})
  commentId: M:Mcma.Data.IDocumentDatabaseTable.QueryAsync``1(Mcma.Data.DocumentDatabase.Queries.Query{``0})
  id: QueryAsync``1(Mcma.Data.DocumentDatabase.Queries.Query{``0})
  parent: Mcma.Data.IDocumentDatabaseTable
  langs:
  - csharp
  - vb
  name: QueryAsync<T>(Query<T>)
  nameWithType: IDocumentDatabaseTable.QueryAsync<T>(Query<T>)
  fullName: Mcma.Data.IDocumentDatabaseTable.QueryAsync<T>(Mcma.Data.DocumentDatabase.Queries.Query<T>)
  type: Method
  source:
    remote:
      path: Base/Mcma.Data/DocumentDatabase/IDocumentDatabaseTable.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: QueryAsync
    path: ../mcma-libraries-dotnet/Base/Mcma.Data/DocumentDatabase/IDocumentDatabaseTable.cs
    startLine: 8
  assemblies:
  - Mcma.Data
  namespace: Mcma.Data
  syntax:
    content: >-
      Task<QueryResults<T>> QueryAsync<T>(Query<T> query)
          where T : class
    parameters:
    - id: query
      type: Mcma.Data.DocumentDatabase.Queries.Query{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{Mcma.QueryResults{{T}}}
    content.vb: Function QueryAsync(Of T As Class)(query As Query(Of T)) As Task(Of QueryResults(Of T))
  overload: Mcma.Data.IDocumentDatabaseTable.QueryAsync*
  nameWithType.vb: IDocumentDatabaseTable.QueryAsync(Of T)(Query(Of T))
  fullName.vb: Mcma.Data.IDocumentDatabaseTable.QueryAsync(Of T)(Mcma.Data.DocumentDatabase.Queries.Query(Of T))
  name.vb: QueryAsync(Of T)(Query(Of T))
- uid: Mcma.Data.IDocumentDatabaseTable.CustomQueryAsync``2(Mcma.Data.DocumentDatabase.Queries.CustomQuery{``1})
  commentId: M:Mcma.Data.IDocumentDatabaseTable.CustomQueryAsync``2(Mcma.Data.DocumentDatabase.Queries.CustomQuery{``1})
  id: CustomQueryAsync``2(Mcma.Data.DocumentDatabase.Queries.CustomQuery{``1})
  parent: Mcma.Data.IDocumentDatabaseTable
  langs:
  - csharp
  - vb
  name: CustomQueryAsync<TResource, TParameters>(CustomQuery<TParameters>)
  nameWithType: IDocumentDatabaseTable.CustomQueryAsync<TResource, TParameters>(CustomQuery<TParameters>)
  fullName: Mcma.Data.IDocumentDatabaseTable.CustomQueryAsync<TResource, TParameters>(Mcma.Data.DocumentDatabase.Queries.CustomQuery<TParameters>)
  type: Method
  source:
    remote:
      path: Base/Mcma.Data/DocumentDatabase/IDocumentDatabaseTable.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: CustomQueryAsync
    path: ../mcma-libraries-dotnet/Base/Mcma.Data/DocumentDatabase/IDocumentDatabaseTable.cs
    startLine: 10
  assemblies:
  - Mcma.Data
  namespace: Mcma.Data
  syntax:
    content: >-
      Task<QueryResults<TResource>> CustomQueryAsync<TResource, TParameters>(CustomQuery<TParameters> customQuery)
          where TResource : class
    parameters:
    - id: customQuery
      type: Mcma.Data.DocumentDatabase.Queries.CustomQuery{{TParameters}}
    typeParameters:
    - id: TResource
    - id: TParameters
    return:
      type: System.Threading.Tasks.Task{Mcma.QueryResults{{TResource}}}
    content.vb: Function CustomQueryAsync(Of TResource As Class, TParameters)(customQuery As CustomQuery(Of TParameters)) As Task(Of QueryResults(Of TResource))
  overload: Mcma.Data.IDocumentDatabaseTable.CustomQueryAsync*
  nameWithType.vb: IDocumentDatabaseTable.CustomQueryAsync(Of TResource, TParameters)(CustomQuery(Of TParameters))
  fullName.vb: Mcma.Data.IDocumentDatabaseTable.CustomQueryAsync(Of TResource, TParameters)(Mcma.Data.DocumentDatabase.Queries.CustomQuery(Of TParameters))
  name.vb: CustomQueryAsync(Of TResource, TParameters)(CustomQuery(Of TParameters))
- uid: Mcma.Data.IDocumentDatabaseTable.GetAsync``1(System.String)
  commentId: M:Mcma.Data.IDocumentDatabaseTable.GetAsync``1(System.String)
  id: GetAsync``1(System.String)
  parent: Mcma.Data.IDocumentDatabaseTable
  langs:
  - csharp
  - vb
  name: GetAsync<T>(String)
  nameWithType: IDocumentDatabaseTable.GetAsync<T>(String)
  fullName: Mcma.Data.IDocumentDatabaseTable.GetAsync<T>(System.String)
  type: Method
  source:
    remote:
      path: Base/Mcma.Data/DocumentDatabase/IDocumentDatabaseTable.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: GetAsync
    path: ../mcma-libraries-dotnet/Base/Mcma.Data/DocumentDatabase/IDocumentDatabaseTable.cs
    startLine: 12
  assemblies:
  - Mcma.Data
  namespace: Mcma.Data
  syntax:
    content: >-
      Task<T> GetAsync<T>(string id)
          where T : class
    parameters:
    - id: id
      type: System.String
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Function GetAsync(Of T As Class)(id As String) As Task(Of T)
  overload: Mcma.Data.IDocumentDatabaseTable.GetAsync*
  nameWithType.vb: IDocumentDatabaseTable.GetAsync(Of T)(String)
  fullName.vb: Mcma.Data.IDocumentDatabaseTable.GetAsync(Of T)(System.String)
  name.vb: GetAsync(Of T)(String)
- uid: Mcma.Data.IDocumentDatabaseTable.PutAsync``1(System.String,``0)
  commentId: M:Mcma.Data.IDocumentDatabaseTable.PutAsync``1(System.String,``0)
  id: PutAsync``1(System.String,``0)
  parent: Mcma.Data.IDocumentDatabaseTable
  langs:
  - csharp
  - vb
  name: PutAsync<T>(String, T)
  nameWithType: IDocumentDatabaseTable.PutAsync<T>(String, T)
  fullName: Mcma.Data.IDocumentDatabaseTable.PutAsync<T>(System.String, T)
  type: Method
  source:
    remote:
      path: Base/Mcma.Data/DocumentDatabase/IDocumentDatabaseTable.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: PutAsync
    path: ../mcma-libraries-dotnet/Base/Mcma.Data/DocumentDatabase/IDocumentDatabaseTable.cs
    startLine: 14
  assemblies:
  - Mcma.Data
  namespace: Mcma.Data
  syntax:
    content: >-
      Task<T> PutAsync<T>(string id, T resource)
          where T : class
    parameters:
    - id: id
      type: System.String
    - id: resource
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Function PutAsync(Of T As Class)(id As String, resource As T) As Task(Of T)
  overload: Mcma.Data.IDocumentDatabaseTable.PutAsync*
  nameWithType.vb: IDocumentDatabaseTable.PutAsync(Of T)(String, T)
  fullName.vb: Mcma.Data.IDocumentDatabaseTable.PutAsync(Of T)(System.String, T)
  name.vb: PutAsync(Of T)(String, T)
- uid: Mcma.Data.IDocumentDatabaseTable.DeleteAsync(System.String)
  commentId: M:Mcma.Data.IDocumentDatabaseTable.DeleteAsync(System.String)
  id: DeleteAsync(System.String)
  parent: Mcma.Data.IDocumentDatabaseTable
  langs:
  - csharp
  - vb
  name: DeleteAsync(String)
  nameWithType: IDocumentDatabaseTable.DeleteAsync(String)
  fullName: Mcma.Data.IDocumentDatabaseTable.DeleteAsync(System.String)
  type: Method
  source:
    remote:
      path: Base/Mcma.Data/DocumentDatabase/IDocumentDatabaseTable.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: DeleteAsync
    path: ../mcma-libraries-dotnet/Base/Mcma.Data/DocumentDatabase/IDocumentDatabaseTable.cs
    startLine: 16
  assemblies:
  - Mcma.Data
  namespace: Mcma.Data
  syntax:
    content: Task DeleteAsync(string id)
    parameters:
    - id: id
      type: System.String
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function DeleteAsync(id As String) As Task
  overload: Mcma.Data.IDocumentDatabaseTable.DeleteAsync*
- uid: Mcma.Data.IDocumentDatabaseTable.CreateMutexAsync(System.String,System.String,System.Nullable{System.TimeSpan})
  commentId: M:Mcma.Data.IDocumentDatabaseTable.CreateMutexAsync(System.String,System.String,System.Nullable{System.TimeSpan})
  id: CreateMutexAsync(System.String,System.String,System.Nullable{System.TimeSpan})
  parent: Mcma.Data.IDocumentDatabaseTable
  langs:
  - csharp
  - vb
  name: CreateMutexAsync(String, String, Nullable<TimeSpan>)
  nameWithType: IDocumentDatabaseTable.CreateMutexAsync(String, String, Nullable<TimeSpan>)
  fullName: Mcma.Data.IDocumentDatabaseTable.CreateMutexAsync(System.String, System.String, System.Nullable<System.TimeSpan>)
  type: Method
  source:
    remote:
      path: Base/Mcma.Data/DocumentDatabase/IDocumentDatabaseTable.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: CreateMutexAsync
    path: ../mcma-libraries-dotnet/Base/Mcma.Data/DocumentDatabase/IDocumentDatabaseTable.cs
    startLine: 18
  assemblies:
  - Mcma.Data
  namespace: Mcma.Data
  syntax:
    content: Task<IDocumentDatabaseMutex> CreateMutexAsync(string mutexName, string mutexHolder, TimeSpan? lockTimeout = default(TimeSpan? ))
    parameters:
    - id: mutexName
      type: System.String
    - id: mutexHolder
      type: System.String
    - id: lockTimeout
      type: System.Nullable{System.TimeSpan}
    return:
      type: System.Threading.Tasks.Task{Mcma.Data.IDocumentDatabaseMutex}
    content.vb: Function CreateMutexAsync(mutexName As String, mutexHolder As String, lockTimeout As TimeSpan? = Nothing) As Task(Of IDocumentDatabaseMutex)
  overload: Mcma.Data.IDocumentDatabaseTable.CreateMutexAsync*
  nameWithType.vb: IDocumentDatabaseTable.CreateMutexAsync(String, String, Nullable(Of TimeSpan))
  fullName.vb: Mcma.Data.IDocumentDatabaseTable.CreateMutexAsync(System.String, System.String, System.Nullable(Of System.TimeSpan))
  name.vb: CreateMutexAsync(String, String, Nullable(Of TimeSpan))
references:
- uid: Mcma.Data
  commentId: N:Mcma.Data
  name: Mcma.Data
  nameWithType: Mcma.Data
  fullName: Mcma.Data
- uid: System.Object.Mcma.Serialization.McmaJson.ToMcmaJson(System.Boolean)
  commentId: M:Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
  parent: Mcma.Serialization.McmaJson
  definition: Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
  name: ToMcmaJson(Boolean)
  nameWithType: McmaJson.ToMcmaJson(Boolean)
  fullName: Mcma.Serialization.McmaJson.ToMcmaJson(System.Boolean)
  spec.csharp:
  - uid: Mcma.Serialization.McmaJson.ToMcmaJson(System.Boolean)
    name: ToMcmaJson
    nameWithType: McmaJson.ToMcmaJson
    fullName: Mcma.Serialization.McmaJson.ToMcmaJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mcma.Serialization.McmaJson.ToMcmaJson(System.Boolean)
    name: ToMcmaJson
    nameWithType: McmaJson.ToMcmaJson
    fullName: Mcma.Serialization.McmaJson.ToMcmaJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
  commentId: M:Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
  isExternal: true
  name: ToMcmaJson(Object, Boolean)
  nameWithType: McmaJson.ToMcmaJson(Object, Boolean)
  fullName: Mcma.Serialization.McmaJson.ToMcmaJson(System.Object, System.Boolean)
  spec.csharp:
  - uid: Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
    name: ToMcmaJson
    nameWithType: McmaJson.ToMcmaJson
    fullName: Mcma.Serialization.McmaJson.ToMcmaJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
    name: ToMcmaJson
    nameWithType: McmaJson.ToMcmaJson
    fullName: Mcma.Serialization.McmaJson.ToMcmaJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.Serialization.McmaJson
  commentId: T:Mcma.Serialization.McmaJson
  parent: Mcma.Serialization
  name: McmaJson
  nameWithType: McmaJson
  fullName: Mcma.Serialization.McmaJson
- uid: Mcma.Serialization
  commentId: N:Mcma.Serialization
  name: Mcma.Serialization
  nameWithType: Mcma.Serialization
  fullName: Mcma.Serialization
- uid: Mcma.Data.IDocumentDatabaseTable.QueryAsync*
  commentId: Overload:Mcma.Data.IDocumentDatabaseTable.QueryAsync
  name: QueryAsync
  nameWithType: IDocumentDatabaseTable.QueryAsync
  fullName: Mcma.Data.IDocumentDatabaseTable.QueryAsync
- uid: Mcma.Data.DocumentDatabase.Queries.Query{{T}}
  commentId: T:Mcma.Data.DocumentDatabase.Queries.Query{``0}
  parent: Mcma.Data.DocumentDatabase.Queries
  definition: Mcma.Data.DocumentDatabase.Queries.Query`1
  name: Query<T>
  nameWithType: Query<T>
  fullName: Mcma.Data.DocumentDatabase.Queries.Query<T>
  nameWithType.vb: Query(Of T)
  fullName.vb: Mcma.Data.DocumentDatabase.Queries.Query(Of T)
  name.vb: Query(Of T)
  spec.csharp:
  - uid: Mcma.Data.DocumentDatabase.Queries.Query`1
    name: Query
    nameWithType: Query
    fullName: Mcma.Data.DocumentDatabase.Queries.Query
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mcma.Data.DocumentDatabase.Queries.Query`1
    name: Query
    nameWithType: Query
    fullName: Mcma.Data.DocumentDatabase.Queries.Query
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Mcma.QueryResults{{T}}}
  commentId: T:System.Threading.Tasks.Task{Mcma.QueryResults{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<QueryResults<T>>
  nameWithType: Task<QueryResults<T>>
  fullName: System.Threading.Tasks.Task<Mcma.QueryResults<T>>
  nameWithType.vb: Task(Of QueryResults(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of Mcma.QueryResults(Of T))
  name.vb: Task(Of QueryResults(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mcma.QueryResults`1
    name: QueryResults
    nameWithType: QueryResults
    fullName: Mcma.QueryResults
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mcma.QueryResults`1
    name: QueryResults
    nameWithType: QueryResults
    fullName: Mcma.QueryResults
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.Data.DocumentDatabase.Queries.Query`1
  commentId: T:Mcma.Data.DocumentDatabase.Queries.Query`1
  parent: Mcma.Data.DocumentDatabase.Queries
  name: Query<T>
  nameWithType: Query<T>
  fullName: Mcma.Data.DocumentDatabase.Queries.Query<T>
  nameWithType.vb: Query(Of T)
  fullName.vb: Mcma.Data.DocumentDatabase.Queries.Query(Of T)
  name.vb: Query(Of T)
  spec.csharp:
  - uid: Mcma.Data.DocumentDatabase.Queries.Query`1
    name: Query
    nameWithType: Query
    fullName: Mcma.Data.DocumentDatabase.Queries.Query
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mcma.Data.DocumentDatabase.Queries.Query`1
    name: Query
    nameWithType: Query
    fullName: Mcma.Data.DocumentDatabase.Queries.Query
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.Data.DocumentDatabase.Queries
  commentId: N:Mcma.Data.DocumentDatabase.Queries
  name: Mcma.Data.DocumentDatabase.Queries
  nameWithType: Mcma.Data.DocumentDatabase.Queries
  fullName: Mcma.Data.DocumentDatabase.Queries
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Mcma.Data.IDocumentDatabaseTable.CustomQueryAsync*
  commentId: Overload:Mcma.Data.IDocumentDatabaseTable.CustomQueryAsync
  name: CustomQueryAsync
  nameWithType: IDocumentDatabaseTable.CustomQueryAsync
  fullName: Mcma.Data.IDocumentDatabaseTable.CustomQueryAsync
- uid: Mcma.Data.DocumentDatabase.Queries.CustomQuery{{TParameters}}
  commentId: T:Mcma.Data.DocumentDatabase.Queries.CustomQuery{``1}
  parent: Mcma.Data.DocumentDatabase.Queries
  definition: Mcma.Data.DocumentDatabase.Queries.CustomQuery`1
  name: CustomQuery<TParameters>
  nameWithType: CustomQuery<TParameters>
  fullName: Mcma.Data.DocumentDatabase.Queries.CustomQuery<TParameters>
  nameWithType.vb: CustomQuery(Of TParameters)
  fullName.vb: Mcma.Data.DocumentDatabase.Queries.CustomQuery(Of TParameters)
  name.vb: CustomQuery(Of TParameters)
  spec.csharp:
  - uid: Mcma.Data.DocumentDatabase.Queries.CustomQuery`1
    name: CustomQuery
    nameWithType: CustomQuery
    fullName: Mcma.Data.DocumentDatabase.Queries.CustomQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TParameters
    nameWithType: TParameters
    fullName: TParameters
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mcma.Data.DocumentDatabase.Queries.CustomQuery`1
    name: CustomQuery
    nameWithType: CustomQuery
    fullName: Mcma.Data.DocumentDatabase.Queries.CustomQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParameters
    nameWithType: TParameters
    fullName: TParameters
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Mcma.QueryResults{{TResource}}}
  commentId: T:System.Threading.Tasks.Task{Mcma.QueryResults{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<QueryResults<TResource>>
  nameWithType: Task<QueryResults<TResource>>
  fullName: System.Threading.Tasks.Task<Mcma.QueryResults<TResource>>
  nameWithType.vb: Task(Of QueryResults(Of TResource))
  fullName.vb: System.Threading.Tasks.Task(Of Mcma.QueryResults(Of TResource))
  name.vb: Task(Of QueryResults(Of TResource))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mcma.QueryResults`1
    name: QueryResults
    nameWithType: QueryResults
    fullName: Mcma.QueryResults
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mcma.QueryResults`1
    name: QueryResults
    nameWithType: QueryResults
    fullName: Mcma.QueryResults
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.Data.DocumentDatabase.Queries.CustomQuery`1
  commentId: T:Mcma.Data.DocumentDatabase.Queries.CustomQuery`1
  name: CustomQuery<TParameters>
  nameWithType: CustomQuery<TParameters>
  fullName: Mcma.Data.DocumentDatabase.Queries.CustomQuery<TParameters>
  nameWithType.vb: CustomQuery(Of TParameters)
  fullName.vb: Mcma.Data.DocumentDatabase.Queries.CustomQuery(Of TParameters)
  name.vb: CustomQuery(Of TParameters)
  spec.csharp:
  - uid: Mcma.Data.DocumentDatabase.Queries.CustomQuery`1
    name: CustomQuery
    nameWithType: CustomQuery
    fullName: Mcma.Data.DocumentDatabase.Queries.CustomQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TParameters
    nameWithType: TParameters
    fullName: TParameters
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mcma.Data.DocumentDatabase.Queries.CustomQuery`1
    name: CustomQuery
    nameWithType: CustomQuery
    fullName: Mcma.Data.DocumentDatabase.Queries.CustomQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParameters
    nameWithType: TParameters
    fullName: TParameters
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.Data.IDocumentDatabaseTable.GetAsync*
  commentId: Overload:Mcma.Data.IDocumentDatabaseTable.GetAsync
  name: GetAsync
  nameWithType: IDocumentDatabaseTable.GetAsync
  fullName: Mcma.Data.IDocumentDatabaseTable.GetAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mcma.Data.IDocumentDatabaseTable.PutAsync*
  commentId: Overload:Mcma.Data.IDocumentDatabaseTable.PutAsync
  name: PutAsync
  nameWithType: IDocumentDatabaseTable.PutAsync
  fullName: Mcma.Data.IDocumentDatabaseTable.PutAsync
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Mcma.Data.IDocumentDatabaseTable.DeleteAsync*
  commentId: Overload:Mcma.Data.IDocumentDatabaseTable.DeleteAsync
  name: DeleteAsync
  nameWithType: IDocumentDatabaseTable.DeleteAsync
  fullName: Mcma.Data.IDocumentDatabaseTable.DeleteAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Mcma.Data.IDocumentDatabaseTable.CreateMutexAsync*
  commentId: Overload:Mcma.Data.IDocumentDatabaseTable.CreateMutexAsync
  name: CreateMutexAsync
  nameWithType: IDocumentDatabaseTable.CreateMutexAsync
  fullName: Mcma.Data.IDocumentDatabaseTable.CreateMutexAsync
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullName.vb: System.Nullable(Of System.TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Mcma.Data.IDocumentDatabaseMutex}
  commentId: T:System.Threading.Tasks.Task{Mcma.Data.IDocumentDatabaseMutex}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IDocumentDatabaseMutex>
  nameWithType: Task<IDocumentDatabaseMutex>
  fullName: System.Threading.Tasks.Task<Mcma.Data.IDocumentDatabaseMutex>
  nameWithType.vb: Task(Of IDocumentDatabaseMutex)
  fullName.vb: System.Threading.Tasks.Task(Of Mcma.Data.IDocumentDatabaseMutex)
  name.vb: Task(Of IDocumentDatabaseMutex)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mcma.Data.IDocumentDatabaseMutex
    name: IDocumentDatabaseMutex
    nameWithType: IDocumentDatabaseMutex
    fullName: Mcma.Data.IDocumentDatabaseMutex
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mcma.Data.IDocumentDatabaseMutex
    name: IDocumentDatabaseMutex
    nameWithType: IDocumentDatabaseMutex
    fullName: Mcma.Data.IDocumentDatabaseMutex
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
