### YamlMime:ManagedReference
items:
- uid: Mcma.Client.ResourceManagerExtensions
  commentId: T:Mcma.Client.ResourceManagerExtensions
  id: ResourceManagerExtensions
  parent: Mcma.Client
  children:
  - Mcma.Client.ResourceManagerExtensions.ResolveResourceFromFullUrl``1(Mcma.Client.IResourceManager,System.String)
  - Mcma.Client.ResourceManagerExtensions.SendJobNotificationAsync``1(Mcma.Client.IResourceManager,``0,Mcma.NotificationEndpoint,System.Threading.CancellationToken)
  - Mcma.Client.ResourceManagerExtensions.SendNotificationAsync``1(Mcma.Client.IResourceManager,``0,Mcma.NotificationEndpoint,System.Threading.CancellationToken)
  - Mcma.Client.ResourceManagerExtensions.UpdateAsync``1(Mcma.Client.IResourceManager,``0,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ResourceManagerExtensions
  nameWithType: ResourceManagerExtensions
  fullName: Mcma.Client.ResourceManagerExtensions
  type: Class
  source:
    remote:
      path: Base/Mcma.Client/Resources/ResourceManagerExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: ResourceManagerExtensions
    path: ../mcma-libraries-dotnet/Base/Mcma.Client/Resources/ResourceManagerExtensions.cs
    startLine: 5
  assemblies:
  - Mcma.Client
  namespace: Mcma.Client
  syntax:
    content: public static class ResourceManagerExtensions
    content.vb: Public Module ResourceManagerExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Mcma.Client.ResourceManagerExtensions.ResolveResourceFromFullUrl``1(Mcma.Client.IResourceManager,System.String)
  commentId: M:Mcma.Client.ResourceManagerExtensions.ResolveResourceFromFullUrl``1(Mcma.Client.IResourceManager,System.String)
  id: ResolveResourceFromFullUrl``1(Mcma.Client.IResourceManager,System.String)
  isExtensionMethod: true
  parent: Mcma.Client.ResourceManagerExtensions
  langs:
  - csharp
  - vb
  name: ResolveResourceFromFullUrl<T>(IResourceManager, String)
  nameWithType: ResourceManagerExtensions.ResolveResourceFromFullUrl<T>(IResourceManager, String)
  fullName: Mcma.Client.ResourceManagerExtensions.ResolveResourceFromFullUrl<T>(Mcma.Client.IResourceManager, System.String)
  type: Method
  source:
    remote:
      path: Base/Mcma.Client/Resources/ResourceManagerExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: ResolveResourceFromFullUrl
    path: ../mcma-libraries-dotnet/Base/Mcma.Client/Resources/ResourceManagerExtensions.cs
    startLine: 7
  assemblies:
  - Mcma.Client
  namespace: Mcma.Client
  syntax:
    content: >-
      public static Task<T> ResolveResourceFromFullUrl<T>(this IResourceManager resourceManager, string url)

          where T : McmaResource
    parameters:
    - id: resourceManager
      type: Mcma.Client.IResourceManager
    - id: url
      type: System.String
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ResolveResourceFromFullUrl(Of T As McmaResource)(resourceManager As IResourceManager, url As String) As Task(Of T)
  overload: Mcma.Client.ResourceManagerExtensions.ResolveResourceFromFullUrl*
  nameWithType.vb: ResourceManagerExtensions.ResolveResourceFromFullUrl(Of T)(IResourceManager, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mcma.Client.ResourceManagerExtensions.ResolveResourceFromFullUrl(Of T)(Mcma.Client.IResourceManager, System.String)
  name.vb: ResolveResourceFromFullUrl(Of T)(IResourceManager, String)
- uid: Mcma.Client.ResourceManagerExtensions.UpdateAsync``1(Mcma.Client.IResourceManager,``0,System.Threading.CancellationToken)
  commentId: M:Mcma.Client.ResourceManagerExtensions.UpdateAsync``1(Mcma.Client.IResourceManager,``0,System.Threading.CancellationToken)
  id: UpdateAsync``1(Mcma.Client.IResourceManager,``0,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Mcma.Client.ResourceManagerExtensions
  langs:
  - csharp
  - vb
  name: UpdateAsync<T>(IResourceManager, T, CancellationToken)
  nameWithType: ResourceManagerExtensions.UpdateAsync<T>(IResourceManager, T, CancellationToken)
  fullName: Mcma.Client.ResourceManagerExtensions.UpdateAsync<T>(Mcma.Client.IResourceManager, T, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Base/Mcma.Client/Resources/ResourceManagerExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: UpdateAsync
    path: ../mcma-libraries-dotnet/Base/Mcma.Client/Resources/ResourceManagerExtensions.cs
    startLine: 15
  assemblies:
  - Mcma.Client
  namespace: Mcma.Client
  syntax:
    content: >-
      public static Task<T> UpdateAsync<T>(this IResourceManager resourceManager, T resource, CancellationToken cancellationToken = default(CancellationToken))

          where T : McmaResource
    parameters:
    - id: resourceManager
      type: Mcma.Client.IResourceManager
    - id: resource
      type: '{T}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpdateAsync(Of T As McmaResource)(resourceManager As IResourceManager, resource As T, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Mcma.Client.ResourceManagerExtensions.UpdateAsync*
  nameWithType.vb: ResourceManagerExtensions.UpdateAsync(Of T)(IResourceManager, T, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mcma.Client.ResourceManagerExtensions.UpdateAsync(Of T)(Mcma.Client.IResourceManager, T, System.Threading.CancellationToken)
  name.vb: UpdateAsync(Of T)(IResourceManager, T, CancellationToken)
- uid: Mcma.Client.ResourceManagerExtensions.SendNotificationAsync``1(Mcma.Client.IResourceManager,``0,Mcma.NotificationEndpoint,System.Threading.CancellationToken)
  commentId: M:Mcma.Client.ResourceManagerExtensions.SendNotificationAsync``1(Mcma.Client.IResourceManager,``0,Mcma.NotificationEndpoint,System.Threading.CancellationToken)
  id: SendNotificationAsync``1(Mcma.Client.IResourceManager,``0,Mcma.NotificationEndpoint,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Mcma.Client.ResourceManagerExtensions
  langs:
  - csharp
  - vb
  name: SendNotificationAsync<T>(IResourceManager, T, NotificationEndpoint, CancellationToken)
  nameWithType: ResourceManagerExtensions.SendNotificationAsync<T>(IResourceManager, T, NotificationEndpoint, CancellationToken)
  fullName: Mcma.Client.ResourceManagerExtensions.SendNotificationAsync<T>(Mcma.Client.IResourceManager, T, Mcma.NotificationEndpoint, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Base/Mcma.Client/Resources/ResourceManagerExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: SendNotificationAsync
    path: ../mcma-libraries-dotnet/Base/Mcma.Client/Resources/ResourceManagerExtensions.cs
    startLine: 19
  assemblies:
  - Mcma.Client
  namespace: Mcma.Client
  syntax:
    content: >-
      public static Task SendNotificationAsync<T>(this IResourceManager resourceManager, T resource, NotificationEndpoint notificationEndpoint, CancellationToken cancellationToken = default(CancellationToken))

          where T : McmaResource
    parameters:
    - id: resourceManager
      type: Mcma.Client.IResourceManager
    - id: resource
      type: '{T}'
    - id: notificationEndpoint
      type: Mcma.NotificationEndpoint
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SendNotificationAsync(Of T As McmaResource)(resourceManager As IResourceManager, resource As T, notificationEndpoint As NotificationEndpoint, cancellationToken As CancellationToken = Nothing) As Task
  overload: Mcma.Client.ResourceManagerExtensions.SendNotificationAsync*
  nameWithType.vb: ResourceManagerExtensions.SendNotificationAsync(Of T)(IResourceManager, T, NotificationEndpoint, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mcma.Client.ResourceManagerExtensions.SendNotificationAsync(Of T)(Mcma.Client.IResourceManager, T, Mcma.NotificationEndpoint, System.Threading.CancellationToken)
  name.vb: SendNotificationAsync(Of T)(IResourceManager, T, NotificationEndpoint, CancellationToken)
- uid: Mcma.Client.ResourceManagerExtensions.SendJobNotificationAsync``1(Mcma.Client.IResourceManager,``0,Mcma.NotificationEndpoint,System.Threading.CancellationToken)
  commentId: M:Mcma.Client.ResourceManagerExtensions.SendJobNotificationAsync``1(Mcma.Client.IResourceManager,``0,Mcma.NotificationEndpoint,System.Threading.CancellationToken)
  id: SendJobNotificationAsync``1(Mcma.Client.IResourceManager,``0,Mcma.NotificationEndpoint,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Mcma.Client.ResourceManagerExtensions
  langs:
  - csharp
  - vb
  name: SendJobNotificationAsync<T>(IResourceManager, T, NotificationEndpoint, CancellationToken)
  nameWithType: ResourceManagerExtensions.SendJobNotificationAsync<T>(IResourceManager, T, NotificationEndpoint, CancellationToken)
  fullName: Mcma.Client.ResourceManagerExtensions.SendJobNotificationAsync<T>(Mcma.Client.IResourceManager, T, Mcma.NotificationEndpoint, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Base/Mcma.Client/Resources/ResourceManagerExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: SendJobNotificationAsync
    path: ../mcma-libraries-dotnet/Base/Mcma.Client/Resources/ResourceManagerExtensions.cs
    startLine: 26
  assemblies:
  - Mcma.Client
  namespace: Mcma.Client
  syntax:
    content: >-
      public static Task SendJobNotificationAsync<T>(this IResourceManager resourceManager, T resource, NotificationEndpoint notificationEndpoint, CancellationToken cancellationToken = default(CancellationToken))

          where T : McmaResource, INotifiable
    parameters:
    - id: resourceManager
      type: Mcma.Client.IResourceManager
    - id: resource
      type: '{T}'
    - id: notificationEndpoint
      type: Mcma.NotificationEndpoint
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SendJobNotificationAsync(Of T As {McmaResource, INotifiable})(resourceManager As IResourceManager, resource As T, notificationEndpoint As NotificationEndpoint, cancellationToken As CancellationToken = Nothing) As Task
  overload: Mcma.Client.ResourceManagerExtensions.SendJobNotificationAsync*
  nameWithType.vb: ResourceManagerExtensions.SendJobNotificationAsync(Of T)(IResourceManager, T, NotificationEndpoint, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mcma.Client.ResourceManagerExtensions.SendJobNotificationAsync(Of T)(Mcma.Client.IResourceManager, T, Mcma.NotificationEndpoint, System.Threading.CancellationToken)
  name.vb: SendJobNotificationAsync(Of T)(IResourceManager, T, NotificationEndpoint, CancellationToken)
references:
- uid: Mcma.Client
  commentId: N:Mcma.Client
  name: Mcma.Client
  nameWithType: Mcma.Client
  fullName: Mcma.Client
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mcma.Client.ResourceManagerExtensions.ResolveResourceFromFullUrl*
  commentId: Overload:Mcma.Client.ResourceManagerExtensions.ResolveResourceFromFullUrl
  name: ResolveResourceFromFullUrl
  nameWithType: ResourceManagerExtensions.ResolveResourceFromFullUrl
  fullName: Mcma.Client.ResourceManagerExtensions.ResolveResourceFromFullUrl
- uid: Mcma.Client.IResourceManager
  commentId: T:Mcma.Client.IResourceManager
  parent: Mcma.Client
  name: IResourceManager
  nameWithType: IResourceManager
  fullName: Mcma.Client.IResourceManager
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Mcma.Client.ResourceManagerExtensions.UpdateAsync*
  commentId: Overload:Mcma.Client.ResourceManagerExtensions.UpdateAsync
  name: UpdateAsync
  nameWithType: ResourceManagerExtensions.UpdateAsync
  fullName: Mcma.Client.ResourceManagerExtensions.UpdateAsync
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Mcma.Client.ResourceManagerExtensions.SendNotificationAsync*
  commentId: Overload:Mcma.Client.ResourceManagerExtensions.SendNotificationAsync
  name: SendNotificationAsync
  nameWithType: ResourceManagerExtensions.SendNotificationAsync
  fullName: Mcma.Client.ResourceManagerExtensions.SendNotificationAsync
- uid: Mcma.NotificationEndpoint
  commentId: T:Mcma.NotificationEndpoint
  parent: Mcma
  name: NotificationEndpoint
  nameWithType: NotificationEndpoint
  fullName: Mcma.NotificationEndpoint
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Mcma
  commentId: N:Mcma
  name: Mcma
  nameWithType: Mcma
  fullName: Mcma
- uid: Mcma.Client.ResourceManagerExtensions.SendJobNotificationAsync*
  commentId: Overload:Mcma.Client.ResourceManagerExtensions.SendJobNotificationAsync
  name: SendJobNotificationAsync
  nameWithType: ResourceManagerExtensions.SendJobNotificationAsync
  fullName: Mcma.Client.ResourceManagerExtensions.SendJobNotificationAsync
