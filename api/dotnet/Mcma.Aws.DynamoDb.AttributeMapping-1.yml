### YamlMime:ManagedReference
items:
- uid: Mcma.Aws.DynamoDb.AttributeMapping`1
  commentId: T:Mcma.Aws.DynamoDb.AttributeMapping`1
  id: AttributeMapping`1
  parent: Mcma.Aws.DynamoDb
  children:
  - Mcma.Aws.DynamoDb.AttributeMapping`1.#ctor(System.String,System.Func{System.String,System.String,`0,System.Object})
  - Mcma.Aws.DynamoDb.AttributeMapping`1.Mcma#Aws#DynamoDb#IAttributeMapping#Get(System.String,System.String,System.Object)
  - Mcma.Aws.DynamoDb.AttributeMapping`1.Name
  - Mcma.Aws.DynamoDb.AttributeMapping`1.ResourceType
  langs:
  - csharp
  - vb
  name: AttributeMapping<TResource>
  nameWithType: AttributeMapping<TResource>
  fullName: Mcma.Aws.DynamoDb.AttributeMapping<TResource>
  type: Class
  source:
    remote:
      path: AWS/Mcma.Aws.DynamoDb/AttributeMapping/AttributeMapping.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: AttributeMapping
    path: ../mcma-libraries-dotnet/AWS/Mcma.Aws.DynamoDb/AttributeMapping/AttributeMapping.cs
    startLine: 4
  assemblies:
  - Mcma.Aws.DynamoDb
  namespace: Mcma.Aws.DynamoDb
  syntax:
    content: 'public class AttributeMapping<TResource> : IAttributeMapping'
    typeParameters:
    - id: TResource
    content.vb: >-
      Public Class AttributeMapping(Of TResource)

          Implements IAttributeMapping
  inheritance:
  - System.Object
  implements:
  - Mcma.Aws.DynamoDb.IAttributeMapping
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Mcma.Serialization.McmaJson.ToMcmaJson(System.Boolean)
  nameWithType.vb: AttributeMapping(Of TResource)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Mcma.Aws.DynamoDb.AttributeMapping(Of TResource)
  name.vb: AttributeMapping(Of TResource)
- uid: Mcma.Aws.DynamoDb.AttributeMapping`1.#ctor(System.String,System.Func{System.String,System.String,`0,System.Object})
  commentId: M:Mcma.Aws.DynamoDb.AttributeMapping`1.#ctor(System.String,System.Func{System.String,System.String,`0,System.Object})
  id: '#ctor(System.String,System.Func{System.String,System.String,`0,System.Object})'
  parent: Mcma.Aws.DynamoDb.AttributeMapping`1
  langs:
  - csharp
  - vb
  name: AttributeMapping(String, Func<String, String, TResource, Object>)
  nameWithType: AttributeMapping<TResource>.AttributeMapping(String, Func<String, String, TResource, Object>)
  fullName: Mcma.Aws.DynamoDb.AttributeMapping<TResource>.AttributeMapping(System.String, System.Func<System.String, System.String, TResource, System.Object>)
  type: Constructor
  source:
    remote:
      path: AWS/Mcma.Aws.DynamoDb/AttributeMapping/AttributeMapping.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: .ctor
    path: ../mcma-libraries-dotnet/AWS/Mcma.Aws.DynamoDb/AttributeMapping/AttributeMapping.cs
    startLine: 6
  assemblies:
  - Mcma.Aws.DynamoDb
  namespace: Mcma.Aws.DynamoDb
  syntax:
    content: public AttributeMapping(string name, Func<string, string, TResource, object> get)
    parameters:
    - id: name
      type: System.String
    - id: get
      type: System.Func{System.String,System.String,{TResource},System.Object}
    content.vb: Public Sub New(name As String, get As Func(Of String, String, TResource, Object))
  overload: Mcma.Aws.DynamoDb.AttributeMapping`1.#ctor*
  nameWithType.vb: AttributeMapping(Of TResource).AttributeMapping(String, Func(Of String, String, TResource, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mcma.Aws.DynamoDb.AttributeMapping(Of TResource).AttributeMapping(System.String, System.Func(Of System.String, System.String, TResource, System.Object))
  name.vb: AttributeMapping(String, Func(Of String, String, TResource, Object))
- uid: Mcma.Aws.DynamoDb.AttributeMapping`1.Name
  commentId: P:Mcma.Aws.DynamoDb.AttributeMapping`1.Name
  id: Name
  parent: Mcma.Aws.DynamoDb.AttributeMapping`1
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: AttributeMapping<TResource>.Name
  fullName: Mcma.Aws.DynamoDb.AttributeMapping<TResource>.Name
  type: Property
  source:
    remote:
      path: AWS/Mcma.Aws.DynamoDb/AttributeMapping/AttributeMapping.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: Name
    path: ../mcma-libraries-dotnet/AWS/Mcma.Aws.DynamoDb/AttributeMapping/AttributeMapping.cs
    startLine: 12
  assemblies:
  - Mcma.Aws.DynamoDb
  namespace: Mcma.Aws.DynamoDb
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Mcma.Aws.DynamoDb.AttributeMapping`1.Name*
  implements:
  - Mcma.Aws.DynamoDb.IAttributeMapping.Name
  nameWithType.vb: AttributeMapping(Of TResource).Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Mcma.Aws.DynamoDb.AttributeMapping(Of TResource).Name
- uid: Mcma.Aws.DynamoDb.AttributeMapping`1.ResourceType
  commentId: P:Mcma.Aws.DynamoDb.AttributeMapping`1.ResourceType
  id: ResourceType
  parent: Mcma.Aws.DynamoDb.AttributeMapping`1
  langs:
  - csharp
  - vb
  name: ResourceType
  nameWithType: AttributeMapping<TResource>.ResourceType
  fullName: Mcma.Aws.DynamoDb.AttributeMapping<TResource>.ResourceType
  type: Property
  source:
    remote:
      path: AWS/Mcma.Aws.DynamoDb/AttributeMapping/AttributeMapping.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: ResourceType
    path: ../mcma-libraries-dotnet/AWS/Mcma.Aws.DynamoDb/AttributeMapping/AttributeMapping.cs
    startLine: 16
  assemblies:
  - Mcma.Aws.DynamoDb
  namespace: Mcma.Aws.DynamoDb
  syntax:
    content: public Type ResourceType { get; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public ReadOnly Property ResourceType As Type
  overload: Mcma.Aws.DynamoDb.AttributeMapping`1.ResourceType*
  implements:
  - Mcma.Aws.DynamoDb.IAttributeMapping.ResourceType
  nameWithType.vb: AttributeMapping(Of TResource).ResourceType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Mcma.Aws.DynamoDb.AttributeMapping(Of TResource).ResourceType
- uid: Mcma.Aws.DynamoDb.AttributeMapping`1.Mcma#Aws#DynamoDb#IAttributeMapping#Get(System.String,System.String,System.Object)
  commentId: M:Mcma.Aws.DynamoDb.AttributeMapping`1.Mcma#Aws#DynamoDb#IAttributeMapping#Get(System.String,System.String,System.Object)
  id: Mcma#Aws#DynamoDb#IAttributeMapping#Get(System.String,System.String,System.Object)
  isEii: true
  parent: Mcma.Aws.DynamoDb.AttributeMapping`1
  langs:
  - csharp
  - vb
  name: IAttributeMapping.Get(String, String, Object)
  nameWithType: AttributeMapping<TResource>.IAttributeMapping.Get(String, String, Object)
  fullName: Mcma.Aws.DynamoDb.AttributeMapping<TResource>.Mcma.Aws.DynamoDb.IAttributeMapping.Get(System.String, System.String, System.Object)
  type: Method
  source:
    remote:
      path: AWS/Mcma.Aws.DynamoDb/AttributeMapping/AttributeMapping.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: Mcma.Aws.DynamoDb.IAttributeMapping.Get
    path: ../mcma-libraries-dotnet/AWS/Mcma.Aws.DynamoDb/AttributeMapping/AttributeMapping.cs
    startLine: 18
  assemblies:
  - Mcma.Aws.DynamoDb
  namespace: Mcma.Aws.DynamoDb
  syntax:
    content: object IAttributeMapping.Get(string partitionKey, string sortKey, object input)
    parameters:
    - id: partitionKey
      type: System.String
    - id: sortKey
      type: System.String
    - id: input
      type: System.Object
    return:
      type: System.Object
    content.vb: Function Mcma.Aws.DynamoDb.IAttributeMapping.Get(partitionKey As String, sortKey As String, input As Object) As Object Implements IAttributeMapping.Get
  overload: Mcma.Aws.DynamoDb.AttributeMapping`1.Mcma#Aws#DynamoDb#IAttributeMapping#Get*
  implements:
  - Mcma.Aws.DynamoDb.IAttributeMapping.Get(System.String,System.String,System.Object)
  nameWithType.vb: AttributeMapping(Of TResource).Mcma.Aws.DynamoDb.IAttributeMapping.Get(String, String, Object)
  fullName.vb: Mcma.Aws.DynamoDb.AttributeMapping(Of TResource).Mcma.Aws.DynamoDb.IAttributeMapping.Get(System.String, System.String, System.Object)
  name.vb: Mcma.Aws.DynamoDb.IAttributeMapping.Get(String, String, Object)
references:
- uid: Mcma.Aws.DynamoDb
  commentId: N:Mcma.Aws.DynamoDb
  name: Mcma.Aws.DynamoDb
  nameWithType: Mcma.Aws.DynamoDb
  fullName: Mcma.Aws.DynamoDb
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Mcma.Aws.DynamoDb.IAttributeMapping
  commentId: T:Mcma.Aws.DynamoDb.IAttributeMapping
  parent: Mcma.Aws.DynamoDb
  name: IAttributeMapping
  nameWithType: IAttributeMapping
  fullName: Mcma.Aws.DynamoDb.IAttributeMapping
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Mcma.Serialization.McmaJson.ToMcmaJson(System.Boolean)
  commentId: M:Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
  parent: Mcma.Serialization.McmaJson
  definition: Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
  name: ToMcmaJson(Boolean)
  nameWithType: McmaJson.ToMcmaJson(Boolean)
  fullName: Mcma.Serialization.McmaJson.ToMcmaJson(System.Boolean)
  spec.csharp:
  - uid: Mcma.Serialization.McmaJson.ToMcmaJson(System.Boolean)
    name: ToMcmaJson
    nameWithType: McmaJson.ToMcmaJson
    fullName: Mcma.Serialization.McmaJson.ToMcmaJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mcma.Serialization.McmaJson.ToMcmaJson(System.Boolean)
    name: ToMcmaJson
    nameWithType: McmaJson.ToMcmaJson
    fullName: Mcma.Serialization.McmaJson.ToMcmaJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
  commentId: M:Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
  isExternal: true
  name: ToMcmaJson(Object, Boolean)
  nameWithType: McmaJson.ToMcmaJson(Object, Boolean)
  fullName: Mcma.Serialization.McmaJson.ToMcmaJson(System.Object, System.Boolean)
  spec.csharp:
  - uid: Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
    name: ToMcmaJson
    nameWithType: McmaJson.ToMcmaJson
    fullName: Mcma.Serialization.McmaJson.ToMcmaJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
    name: ToMcmaJson
    nameWithType: McmaJson.ToMcmaJson
    fullName: Mcma.Serialization.McmaJson.ToMcmaJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.Serialization.McmaJson
  commentId: T:Mcma.Serialization.McmaJson
  parent: Mcma.Serialization
  name: McmaJson
  nameWithType: McmaJson
  fullName: Mcma.Serialization.McmaJson
- uid: Mcma.Serialization
  commentId: N:Mcma.Serialization
  name: Mcma.Serialization
  nameWithType: Mcma.Serialization
  fullName: Mcma.Serialization
- uid: Mcma.Aws.DynamoDb.AttributeMapping`1.#ctor*
  commentId: Overload:Mcma.Aws.DynamoDb.AttributeMapping`1.#ctor
  name: AttributeMapping
  nameWithType: AttributeMapping<TResource>.AttributeMapping
  fullName: Mcma.Aws.DynamoDb.AttributeMapping<TResource>.AttributeMapping
  nameWithType.vb: AttributeMapping(Of TResource).AttributeMapping
  fullName.vb: Mcma.Aws.DynamoDb.AttributeMapping(Of TResource).AttributeMapping
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Func{System.String,System.String,{TResource},System.Object}
  commentId: T:System.Func{System.String,System.String,`0,System.Object}
  parent: System
  definition: System.Func`4
  name: Func<String, String, TResource, Object>
  nameWithType: Func<String, String, TResource, Object>
  fullName: System.Func<System.String, System.String, TResource, System.Object>
  nameWithType.vb: Func(Of String, String, TResource, Object)
  fullName.vb: System.Func(Of System.String, System.String, TResource, System.Object)
  name.vb: Func(Of String, String, TResource, Object)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.Aws.DynamoDb.AttributeMapping`1.Name*
  commentId: Overload:Mcma.Aws.DynamoDb.AttributeMapping`1.Name
  name: Name
  nameWithType: AttributeMapping<TResource>.Name
  fullName: Mcma.Aws.DynamoDb.AttributeMapping<TResource>.Name
  nameWithType.vb: AttributeMapping(Of TResource).Name
  fullName.vb: Mcma.Aws.DynamoDb.AttributeMapping(Of TResource).Name
- uid: Mcma.Aws.DynamoDb.IAttributeMapping.Name
  commentId: P:Mcma.Aws.DynamoDb.IAttributeMapping.Name
  parent: Mcma.Aws.DynamoDb.IAttributeMapping
  name: Name
  nameWithType: IAttributeMapping.Name
  fullName: Mcma.Aws.DynamoDb.IAttributeMapping.Name
- uid: Mcma.Aws.DynamoDb.AttributeMapping`1.ResourceType*
  commentId: Overload:Mcma.Aws.DynamoDb.AttributeMapping`1.ResourceType
  name: ResourceType
  nameWithType: AttributeMapping<TResource>.ResourceType
  fullName: Mcma.Aws.DynamoDb.AttributeMapping<TResource>.ResourceType
  nameWithType.vb: AttributeMapping(Of TResource).ResourceType
  fullName.vb: Mcma.Aws.DynamoDb.AttributeMapping(Of TResource).ResourceType
- uid: Mcma.Aws.DynamoDb.IAttributeMapping.ResourceType
  commentId: P:Mcma.Aws.DynamoDb.IAttributeMapping.ResourceType
  parent: Mcma.Aws.DynamoDb.IAttributeMapping
  name: ResourceType
  nameWithType: IAttributeMapping.ResourceType
  fullName: Mcma.Aws.DynamoDb.IAttributeMapping.ResourceType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Mcma.Aws.DynamoDb.AttributeMapping`1.Mcma#Aws#DynamoDb#IAttributeMapping#Get*
  commentId: Overload:Mcma.Aws.DynamoDb.AttributeMapping`1.Mcma#Aws#DynamoDb#IAttributeMapping#Get
  name: IAttributeMapping.Get
  nameWithType: AttributeMapping<TResource>.IAttributeMapping.Get
  fullName: Mcma.Aws.DynamoDb.AttributeMapping<TResource>.Mcma.Aws.DynamoDb.IAttributeMapping.Get
  nameWithType.vb: AttributeMapping(Of TResource).Mcma.Aws.DynamoDb.IAttributeMapping.Get
  fullName.vb: Mcma.Aws.DynamoDb.AttributeMapping(Of TResource).Mcma.Aws.DynamoDb.IAttributeMapping.Get
  name.vb: Mcma.Aws.DynamoDb.IAttributeMapping.Get
- uid: Mcma.Aws.DynamoDb.IAttributeMapping.Get(System.String,System.String,System.Object)
  commentId: M:Mcma.Aws.DynamoDb.IAttributeMapping.Get(System.String,System.String,System.Object)
  parent: Mcma.Aws.DynamoDb.IAttributeMapping
  isExternal: true
  name: Get(String, String, Object)
  nameWithType: IAttributeMapping.Get(String, String, Object)
  fullName: Mcma.Aws.DynamoDb.IAttributeMapping.Get(System.String, System.String, System.Object)
  spec.csharp:
  - uid: Mcma.Aws.DynamoDb.IAttributeMapping.Get(System.String,System.String,System.Object)
    name: Get
    nameWithType: IAttributeMapping.Get
    fullName: Mcma.Aws.DynamoDb.IAttributeMapping.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mcma.Aws.DynamoDb.IAttributeMapping.Get(System.String,System.String,System.Object)
    name: Get
    nameWithType: IAttributeMapping.Get
    fullName: Mcma.Aws.DynamoDb.IAttributeMapping.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
