### YamlMime:ManagedReference
items:
- uid: Mcma.McmaExpandoObject
  commentId: T:Mcma.McmaExpandoObject
  id: McmaExpandoObject
  parent: Mcma
  children:
  - Mcma.McmaExpandoObject.Get``1(System.String,System.Boolean)
  - Mcma.McmaExpandoObject.GetOrAdd``1(System.String,System.Boolean)
  - Mcma.McmaExpandoObject.HasProperty(System.String,System.Boolean)
  - Mcma.McmaExpandoObject.Item(System.String)
  - Mcma.McmaExpandoObject.Set``1(System.String,``0)
  - Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  - Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Clear
  - Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  - Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  - Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Count
  - Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#IsReadOnly
  - Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  - Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Add(System.String,System.Object)
  - Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#ContainsKey(System.String)
  - Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Keys
  - Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Remove(System.String)
  - Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#TryGetValue(System.String,System.Object@)
  - Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Values
  - Mcma.McmaExpandoObject.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator
  - Mcma.McmaExpandoObject.System#Collections#IEnumerable#GetEnumerator
  - Mcma.McmaExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)
  - Mcma.McmaExpandoObject.TryGet``1(System.String,``0@)
  - Mcma.McmaExpandoObject.TryGet``1(System.String,System.Boolean,``0@)
  langs:
  - csharp
  - vb
  name: McmaExpandoObject
  nameWithType: McmaExpandoObject
  fullName: Mcma.McmaExpandoObject
  type: Class
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: McmaExpandoObject
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 11
  assemblies:
  - Mcma.Core
  namespace: Mcma
  summary: "\nBase class for all MCMA data model objects, exposing an ExpandoObject-like dynamic interface\n"
  example: []
  syntax:
    content: 'public class McmaExpandoObject : IDictionary<string, object>, ICollection<KeyValuePair<string, object>>, IEnumerable<KeyValuePair<string, object>>, IEnumerable, IDynamicMetaObjectProvider'
    content.vb: >-
      Public Class McmaExpandoObject
          Implements IDictionary(Of String, Object), ICollection(Of KeyValuePair(Of String, Object)), IEnumerable(Of KeyValuePair(Of String, Object)), IEnumerable, IDynamicMetaObjectProvider
  inheritance:
  - System.Object
  derivedClasses:
  - Mcma.McmaObject
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.Object}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  - System.Collections.IEnumerable
  - System.Dynamic.IDynamicMetaObjectProvider
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Mcma.Serialization.McmaJson.ToMcmaJson(System.Boolean)
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Mcma.Data.DocumentDatabase.Queries.HelperExtensions.ToFilterExpression``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Mcma.McmaExpandoObject.Item(System.String)
  commentId: P:Mcma.McmaExpandoObject.Item(System.String)
  id: Item(System.String)
  parent: Mcma.McmaExpandoObject
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: McmaExpandoObject.Item[String]
  fullName: Mcma.McmaExpandoObject.Item[System.String]
  type: Property
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: this[]
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 21
  assemblies:
  - Mcma.Core
  namespace: Mcma
  summary: "\nGets or sets a property using the property&apos;s key as an indexer\n"
  example: []
  syntax:
    content: public object this[string key] { get; set; }
    parameters:
    - id: key
      type: System.String
      description: ''
    return:
      type: System.Object
    content.vb: Public Property Item(key As String) As Object
  overload: Mcma.McmaExpandoObject.Item*
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.Object}.Item(System.String)
  nameWithType.vb: McmaExpandoObject.Item(String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mcma.McmaExpandoObject.Item(System.String)
  name.vb: Item(String)
- uid: Mcma.McmaExpandoObject.HasProperty(System.String,System.Boolean)
  commentId: M:Mcma.McmaExpandoObject.HasProperty(System.String,System.Boolean)
  id: HasProperty(System.String,System.Boolean)
  parent: Mcma.McmaExpandoObject
  langs:
  - csharp
  - vb
  name: HasProperty(String, Boolean)
  nameWithType: McmaExpandoObject.HasProperty(String, Boolean)
  fullName: Mcma.McmaExpandoObject.HasProperty(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: HasProperty
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 29
  assemblies:
  - Mcma.Core
  namespace: Mcma
  summary: "\nChecks if the object has a property with the given name\n"
  example: []
  syntax:
    content: public bool HasProperty(string key, bool caseSensitive = true)
    parameters:
    - id: key
      type: System.String
      description: The key of the property to check for
    - id: caseSensitive
      type: System.Boolean
      description: Flag indicating if the check should be case-sensitive. Defaults to true.
    return:
      type: System.Boolean
      description: True if the object contains a property with the given key; otherwise, false
    content.vb: Public Function HasProperty(key As String, caseSensitive As Boolean = True) As Boolean
  overload: Mcma.McmaExpandoObject.HasProperty*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mcma.McmaExpandoObject.Get``1(System.String,System.Boolean)
  commentId: M:Mcma.McmaExpandoObject.Get``1(System.String,System.Boolean)
  id: Get``1(System.String,System.Boolean)
  parent: Mcma.McmaExpandoObject
  langs:
  - csharp
  - vb
  name: Get<T>(String, Boolean)
  nameWithType: McmaExpandoObject.Get<T>(String, Boolean)
  fullName: Mcma.McmaExpandoObject.Get<T>(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: Get
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 43
  assemblies:
  - Mcma.Core
  namespace: Mcma
  summary: "\nGets the value for the property with the given key\n"
  example: []
  syntax:
    content: public T Get<T>(string key, bool caseSensitive = true)
    parameters:
    - id: key
      type: System.String
      description: The key of the property to get the value for
    - id: caseSensitive
      type: System.Boolean
      description: Flag indicating if the check should be case-sensitive. Defaults to true.
    typeParameters:
    - id: T
      description: The expected type of the property&apos;s value
    return:
      type: '{T}'
      description: The value of the property
    content.vb: Public Function Get(Of T)(key As String, caseSensitive As Boolean = True) As T
  overload: Mcma.McmaExpandoObject.Get*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: Thrown when the type of the value of the property does not match expected type T
  nameWithType.vb: McmaExpandoObject.Get(Of T)(String, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mcma.McmaExpandoObject.Get(Of T)(System.String, System.Boolean)
  name.vb: Get(Of T)(String, Boolean)
- uid: Mcma.McmaExpandoObject.GetOrAdd``1(System.String,System.Boolean)
  commentId: M:Mcma.McmaExpandoObject.GetOrAdd``1(System.String,System.Boolean)
  id: GetOrAdd``1(System.String,System.Boolean)
  parent: Mcma.McmaExpandoObject
  langs:
  - csharp
  - vb
  name: GetOrAdd<T>(String, Boolean)
  nameWithType: McmaExpandoObject.GetOrAdd<T>(String, Boolean)
  fullName: Mcma.McmaExpandoObject.GetOrAdd<T>(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: GetOrAdd
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 57
  assemblies:
  - Mcma.Core
  namespace: Mcma
  summary: "\nTries to get the value for a given property. If the property is not found on the object, it&apos;s set to the default value for type T.\n"
  example: []
  syntax:
    content: >-
      public T GetOrAdd<T>(string key, bool caseSensitive = true)
          where T : new()
    parameters:
    - id: key
      type: System.String
      description: The key of the property to get the value for
    - id: caseSensitive
      type: System.Boolean
      description: Flag indicating if the check should be case-sensitive. Defaults to true.
    typeParameters:
    - id: T
      description: The expected type of the property&apos;s value
    return:
      type: '{T}'
      description: The value of the property
    content.vb: Public Function GetOrAdd(Of T As New)(key As String, caseSensitive As Boolean = True) As T
  overload: Mcma.McmaExpandoObject.GetOrAdd*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: Thrown when the type of the value of the property does not match expected type T
  nameWithType.vb: McmaExpandoObject.GetOrAdd(Of T)(String, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mcma.McmaExpandoObject.GetOrAdd(Of T)(System.String, System.Boolean)
  name.vb: GetOrAdd(Of T)(String, Boolean)
- uid: Mcma.McmaExpandoObject.TryGet``1(System.String,``0@)
  commentId: M:Mcma.McmaExpandoObject.TryGet``1(System.String,``0@)
  id: TryGet``1(System.String,``0@)
  parent: Mcma.McmaExpandoObject
  langs:
  - csharp
  - vb
  name: TryGet<T>(String, out T)
  nameWithType: McmaExpandoObject.TryGet<T>(String, out T)
  fullName: Mcma.McmaExpandoObject.TryGet<T>(System.String, out T)
  type: Method
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: TryGet
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 68
  assemblies:
  - Mcma.Core
  namespace: Mcma
  summary: "\nTries to get the value for a given property. If the property is not found on the object, it&apos;s set to the default value for type T.\n"
  example: []
  syntax:
    content: public bool TryGet<T>(string key, out T value)
    parameters:
    - id: key
      type: System.String
      description: The key of the property to get the value for
    - id: value
      type: '{T}'
      description: The value of the property, if found
    typeParameters:
    - id: T
      description: The expected type of the property&apos;s value
    return:
      type: System.Boolean
      description: True if the property was found on the object; otherwise false
    content.vb: Public Function TryGet(Of T)(key As String, ByRef value As T) As Boolean
  overload: Mcma.McmaExpandoObject.TryGet*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: Thrown when the type of the value of the property does not match expected type T
  nameWithType.vb: McmaExpandoObject.TryGet(Of T)(String, ByRef T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mcma.McmaExpandoObject.TryGet(Of T)(System.String, ByRef T)
  name.vb: TryGet(Of T)(String, ByRef T)
- uid: Mcma.McmaExpandoObject.TryGet``1(System.String,System.Boolean,``0@)
  commentId: M:Mcma.McmaExpandoObject.TryGet``1(System.String,System.Boolean,``0@)
  id: TryGet``1(System.String,System.Boolean,``0@)
  parent: Mcma.McmaExpandoObject
  langs:
  - csharp
  - vb
  name: TryGet<T>(String, Boolean, out T)
  nameWithType: McmaExpandoObject.TryGet<T>(String, Boolean, out T)
  fullName: Mcma.McmaExpandoObject.TryGet<T>(System.String, System.Boolean, out T)
  type: Method
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: TryGet
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 79
  assemblies:
  - Mcma.Core
  namespace: Mcma
  summary: "\nTries to get the value for a given property. If the property is not found on the object, it&apos;s set to the default value for type T.\n"
  example: []
  syntax:
    content: public bool TryGet<T>(string key, bool caseSensitive, out T value)
    parameters:
    - id: key
      type: System.String
      description: The key of the property to get the value for
    - id: caseSensitive
      type: System.Boolean
      description: Flag indicating if the check should be case-sensitive. Defaults to true.
    - id: value
      type: '{T}'
      description: The value of the property, if found
    typeParameters:
    - id: T
      description: The expected type of the property&apos;s value
    return:
      type: System.Boolean
      description: The value of the property
    content.vb: Public Function TryGet(Of T)(key As String, caseSensitive As Boolean, ByRef value As T) As Boolean
  overload: Mcma.McmaExpandoObject.TryGet*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: Thrown when the type of the value of the property does not match expected type T
  nameWithType.vb: McmaExpandoObject.TryGet(Of T)(String, Boolean, ByRef T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mcma.McmaExpandoObject.TryGet(Of T)(System.String, System.Boolean, ByRef T)
  name.vb: TryGet(Of T)(String, Boolean, ByRef T)
- uid: Mcma.McmaExpandoObject.Set``1(System.String,``0)
  commentId: M:Mcma.McmaExpandoObject.Set``1(System.String,``0)
  id: Set``1(System.String,``0)
  parent: Mcma.McmaExpandoObject
  langs:
  - csharp
  - vb
  name: Set<T>(String, T)
  nameWithType: McmaExpandoObject.Set<T>(String, T)
  fullName: Mcma.McmaExpandoObject.Set<T>(System.String, T)
  type: Method
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: Set
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 99
  assemblies:
  - Mcma.Core
  namespace: Mcma
  summary: "\nSets the value of a property\n"
  example: []
  syntax:
    content: public T Set<T>(string key, T value)
    parameters:
    - id: key
      type: System.String
      description: The key of the property to set
    - id: value
      type: '{T}'
      description: The value to set for the property
    typeParameters:
    - id: T
      description: The type of the property&apos;s value
    return:
      type: '{T}'
      description: The value stored on the object
    content.vb: Public Function Set(Of T)(key As String, value As T) As T
  overload: Mcma.McmaExpandoObject.Set*
  nameWithType.vb: McmaExpandoObject.Set(Of T)(String, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mcma.McmaExpandoObject.Set(Of T)(System.String, T)
  name.vb: Set(Of T)(String, T)
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Keys
  commentId: P:Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Keys
  id: System#Collections#Generic#IDictionary{System#String,System#Object}#Keys
  isEii: true
  parent: Mcma.McmaExpandoObject
  langs:
  - csharp
  - vb
  name: IDictionary<String, Object>.Keys
  nameWithType: McmaExpandoObject.IDictionary<String, Object>.Keys
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String, System.Object>.Keys
  type: Property
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: System.Collections.Generic.IDictionary<System.String,System.Object>.Keys
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 106
  assemblies:
  - Mcma.Core
  namespace: Mcma
  syntax:
    content: ICollection<string> IDictionary<string, object>.Keys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.String}
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IDictionary<System.String,System.Object>.Keys As ICollection(Of String) Implements IDictionary(Of String, Object).Keys
  overload: Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Keys*
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.Object}.Keys
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.Keys
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.Keys
  name.vb: System.Collections.Generic.IDictionary<System.String,System.Object>.Keys
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Values
  commentId: P:Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Values
  id: System#Collections#Generic#IDictionary{System#String,System#Object}#Values
  isEii: true
  parent: Mcma.McmaExpandoObject
  langs:
  - csharp
  - vb
  name: IDictionary<String, Object>.Values
  nameWithType: McmaExpandoObject.IDictionary<String, Object>.Values
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String, System.Object>.Values
  type: Property
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: System.Collections.Generic.IDictionary<System.String,System.Object>.Values
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 108
  assemblies:
  - Mcma.Core
  namespace: Mcma
  syntax:
    content: ICollection<object> IDictionary<string, object>.Values { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.Object}
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IDictionary<System.String,System.Object>.Values As ICollection(Of Object) Implements IDictionary(Of String, Object).Values
  overload: Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Values*
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.Object}.Values
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.Values
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.Values
  name.vb: System.Collections.Generic.IDictionary<System.String,System.Object>.Values
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Count
  commentId: P:Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Count
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Count
  isEii: true
  parent: Mcma.McmaExpandoObject
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<String, Object>>.Count
  nameWithType: McmaExpandoObject.ICollection<KeyValuePair<String, Object>>.Count
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Count
  type: Property
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Count
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 110
  assemblies:
  - Mcma.Core
  namespace: Mcma
  syntax:
    content: int ICollection<KeyValuePair<string, object>>.Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Count As Integer Implements ICollection(Of KeyValuePair(Of String, Object)).Count
  overload: Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Count*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Count
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Count
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Count
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Count
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#IsReadOnly
  commentId: P:Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#IsReadOnly
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#IsReadOnly
  isEii: true
  parent: Mcma.McmaExpandoObject
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<String, Object>>.IsReadOnly
  nameWithType: McmaExpandoObject.ICollection<KeyValuePair<String, Object>>.IsReadOnly
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.IsReadOnly
  type: Property
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 112
  assemblies:
  - Mcma.Core
  namespace: Mcma
  syntax:
    content: bool ICollection<KeyValuePair<string, object>>.IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly As Boolean Implements ICollection(Of KeyValuePair(Of String, Object)).IsReadOnly
  overload: Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.IsReadOnly
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Add(System.String,System.Object)
  commentId: M:Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Add(System.String,System.Object)
  id: System#Collections#Generic#IDictionary{System#String,System#Object}#Add(System.String,System.Object)
  isEii: true
  parent: Mcma.McmaExpandoObject
  langs:
  - csharp
  - vb
  name: IDictionary<String, Object>.Add(String, Object)
  nameWithType: McmaExpandoObject.IDictionary<String, Object>.Add(String, Object)
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String, System.Object>.Add(System.String, System.Object)
  type: Method
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: System.Collections.Generic.IDictionary<System.String,System.Object>.Add
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 114
  assemblies:
  - Mcma.Core
  namespace: Mcma
  syntax:
    content: void IDictionary<string, object>.Add(string key, object value)
    parameters:
    - id: key
      type: System.String
    - id: value
      type: System.Object
    content.vb: Sub System.Collections.Generic.IDictionary<System.String,System.Object>.Add(key As String, value As Object) Implements IDictionary(Of String, Object).Add
  overload: Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Add*
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.Object}.Add(System.String,System.Object)
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.Add(String, Object)
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.Add(System.String, System.Object)
  name.vb: System.Collections.Generic.IDictionary<System.String,System.Object>.Add(String, Object)
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  commentId: M:Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  isEii: true
  parent: Mcma.McmaExpandoObject
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<String, Object>>.Add(KeyValuePair<String, Object>)
  nameWithType: McmaExpandoObject.ICollection<KeyValuePair<String, Object>>.Add(KeyValuePair<String, Object>)
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Add(System.Collections.Generic.KeyValuePair<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 116
  assemblies:
  - Mcma.Core
  namespace: Mcma
  syntax:
    content: void ICollection<KeyValuePair<string, object>>.Add(KeyValuePair<string, object> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.String,System.Object}
    content.vb: Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(item As KeyValuePair(Of String, Object)) Implements ICollection(Of KeyValuePair(Of String, Object)).Add
  overload: Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(KeyValuePair(Of String, Object))
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(KeyValuePair(Of String, Object))
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Clear
  commentId: M:Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Clear
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Clear
  isEii: true
  parent: Mcma.McmaExpandoObject
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<String, Object>>.Clear()
  nameWithType: McmaExpandoObject.ICollection<KeyValuePair<String, Object>>.Clear()
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Clear()
  type: Method
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Clear
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 118
  assemblies:
  - Mcma.Core
  namespace: Mcma
  syntax:
    content: void ICollection<KeyValuePair<string, object>>.Clear()
    content.vb: Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Clear Implements ICollection(Of KeyValuePair(Of String, Object)).Clear
  overload: Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Clear*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Clear
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Clear()
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Clear()
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Clear()
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  commentId: M:Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  isEii: true
  parent: Mcma.McmaExpandoObject
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<String, Object>>.Contains(KeyValuePair<String, Object>)
  nameWithType: McmaExpandoObject.ICollection<KeyValuePair<String, Object>>.Contains(KeyValuePair<String, Object>)
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Contains(System.Collections.Generic.KeyValuePair<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 120
  assemblies:
  - Mcma.Core
  namespace: Mcma
  syntax:
    content: bool ICollection<KeyValuePair<string, object>>.Contains(KeyValuePair<string, object> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.String,System.Object}
    return:
      type: System.Boolean
    content.vb: Function System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(item As KeyValuePair(Of String, Object)) As Boolean Implements ICollection(Of KeyValuePair(Of String, Object)).Contains
  overload: Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(KeyValuePair(Of String, Object))
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(KeyValuePair(Of String, Object))
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#ContainsKey(System.String)
  commentId: M:Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#ContainsKey(System.String)
  id: System#Collections#Generic#IDictionary{System#String,System#Object}#ContainsKey(System.String)
  isEii: true
  parent: Mcma.McmaExpandoObject
  langs:
  - csharp
  - vb
  name: IDictionary<String, Object>.ContainsKey(String)
  nameWithType: McmaExpandoObject.IDictionary<String, Object>.ContainsKey(String)
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String, System.Object>.ContainsKey(System.String)
  type: Method
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: System.Collections.Generic.IDictionary<System.String,System.Object>.ContainsKey
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 122
  assemblies:
  - Mcma.Core
  namespace: Mcma
  syntax:
    content: bool IDictionary<string, object>.ContainsKey(string key)
    parameters:
    - id: key
      type: System.String
    return:
      type: System.Boolean
    content.vb: Function System.Collections.Generic.IDictionary<System.String,System.Object>.ContainsKey(key As String) As Boolean Implements IDictionary(Of String, Object).ContainsKey
  overload: Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#ContainsKey*
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.Object}.ContainsKey(System.String)
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.ContainsKey(String)
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.ContainsKey(System.String)
  name.vb: System.Collections.Generic.IDictionary<System.String,System.Object>.ContainsKey(String)
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  commentId: M:Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  isEii: true
  parent: Mcma.McmaExpandoObject
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<String, Object>>.CopyTo(KeyValuePair<String, Object>[], Int32)
  nameWithType: McmaExpandoObject.ICollection<KeyValuePair<String, Object>>.CopyTo(KeyValuePair<String, Object>[], Int32)
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.Object>[], System.Int32)
  type: Method
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 124
  assemblies:
  - Mcma.Core
  namespace: Mcma
  syntax:
    content: void ICollection<KeyValuePair<string, object>>.CopyTo(KeyValuePair<string, object>[] array, int arrayIndex)
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{System.String,System.Object}[]
    - id: arrayIndex
      type: System.Int32
    content.vb: Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(array As KeyValuePair(Of String, Object)(), arrayIndex As Integer) Implements ICollection(Of KeyValuePair(Of String, Object)).CopyTo
  overload: Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(KeyValuePair(Of String, Object)(), Int32)
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair(Of System.String, System.Object)(), System.Int32)
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(KeyValuePair(Of String, Object)(), Int32)
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator
  commentId: M:Mcma.McmaExpandoObject.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator
  isEii: true
  parent: Mcma.McmaExpandoObject
  langs:
  - csharp
  - vb
  name: IEnumerable<KeyValuePair<String, Object>>.GetEnumerator()
  nameWithType: McmaExpandoObject.IEnumerable<KeyValuePair<String, Object>>.GetEnumerator()
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 126
  assemblies:
  - Mcma.Core
  namespace: Mcma
  syntax:
    content: IEnumerator<KeyValuePair<string, object>> IEnumerable<KeyValuePair<string, object>>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
    content.vb: Function System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator As IEnumerator(Of KeyValuePair(Of String, Object)) Implements IEnumerable(Of KeyValuePair(Of String, Object)).GetEnumerator
  overload: Mcma.McmaExpandoObject.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.GetEnumerator
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator()
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator()
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Remove(System.String)
  commentId: M:Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Remove(System.String)
  id: System#Collections#Generic#IDictionary{System#String,System#Object}#Remove(System.String)
  isEii: true
  parent: Mcma.McmaExpandoObject
  langs:
  - csharp
  - vb
  name: IDictionary<String, Object>.Remove(String)
  nameWithType: McmaExpandoObject.IDictionary<String, Object>.Remove(String)
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String, System.Object>.Remove(System.String)
  type: Method
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: System.Collections.Generic.IDictionary<System.String,System.Object>.Remove
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 128
  assemblies:
  - Mcma.Core
  namespace: Mcma
  syntax:
    content: bool IDictionary<string, object>.Remove(string key)
    parameters:
    - id: key
      type: System.String
    return:
      type: System.Boolean
    content.vb: Function System.Collections.Generic.IDictionary<System.String,System.Object>.Remove(key As String) As Boolean Implements IDictionary(Of String, Object).Remove
  overload: Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Remove*
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.Object}.Remove(System.String)
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.Remove(String)
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.Remove(System.String)
  name.vb: System.Collections.Generic.IDictionary<System.String,System.Object>.Remove(String)
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  commentId: M:Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  isEii: true
  parent: Mcma.McmaExpandoObject
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<String, Object>>.Remove(KeyValuePair<String, Object>)
  nameWithType: McmaExpandoObject.ICollection<KeyValuePair<String, Object>>.Remove(KeyValuePair<String, Object>)
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Remove(System.Collections.Generic.KeyValuePair<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 130
  assemblies:
  - Mcma.Core
  namespace: Mcma
  syntax:
    content: bool ICollection<KeyValuePair<string, object>>.Remove(KeyValuePair<string, object> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.String,System.Object}
    return:
      type: System.Boolean
    content.vb: Function System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(item As KeyValuePair(Of String, Object)) As Boolean Implements ICollection(Of KeyValuePair(Of String, Object)).Remove
  overload: Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(KeyValuePair(Of String, Object))
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(KeyValuePair(Of String, Object))
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#TryGetValue(System.String,System.Object@)
  commentId: M:Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#TryGetValue(System.String,System.Object@)
  id: System#Collections#Generic#IDictionary{System#String,System#Object}#TryGetValue(System.String,System.Object@)
  isEii: true
  parent: Mcma.McmaExpandoObject
  langs:
  - csharp
  - vb
  name: IDictionary<String, Object>.TryGetValue(String, out Object)
  nameWithType: McmaExpandoObject.IDictionary<String, Object>.TryGetValue(String, out Object)
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String, System.Object>.TryGetValue(System.String, out System.Object)
  type: Method
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: System.Collections.Generic.IDictionary<System.String,System.Object>.TryGetValue
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 132
  assemblies:
  - Mcma.Core
  namespace: Mcma
  syntax:
    content: bool IDictionary<string, object>.TryGetValue(string key, out object value)
    parameters:
    - id: key
      type: System.String
    - id: value
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Function System.Collections.Generic.IDictionary<System.String,System.Object>.TryGetValue(key As String, ByRef value As Object) As Boolean Implements IDictionary(Of String, Object).TryGetValue
  overload: Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#TryGetValue*
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.Object}.TryGetValue(System.String,System.Object@)
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.TryGetValue(String, ByRef Object)
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.TryGetValue(System.String, ByRef System.Object)
  name.vb: System.Collections.Generic.IDictionary<System.String,System.Object>.TryGetValue(String, ByRef Object)
- uid: Mcma.McmaExpandoObject.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Mcma.McmaExpandoObject.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Mcma.McmaExpandoObject
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: McmaExpandoObject.IEnumerable.GetEnumerator()
  fullName: Mcma.McmaExpandoObject.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 134
  assemblies:
  - Mcma.Core
  namespace: Mcma
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: Mcma.McmaExpandoObject.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: McmaExpandoObject.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Mcma.McmaExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)
  commentId: M:Mcma.McmaExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)
  id: System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)
  isEii: true
  parent: Mcma.McmaExpandoObject
  langs:
  - csharp
  - vb
  name: IDynamicMetaObjectProvider.GetMetaObject(Expression)
  nameWithType: McmaExpandoObject.IDynamicMetaObjectProvider.GetMetaObject(Expression)
  fullName: Mcma.McmaExpandoObject.System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: Base/Mcma.Core/Model/McmaExpandoObject.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject
    path: ../mcma-libraries-dotnet/Base/Mcma.Core/Model/McmaExpandoObject.cs
    startLine: 136
  assemblies:
  - Mcma.Core
  namespace: Mcma
  syntax:
    content: DynamicMetaObject IDynamicMetaObjectProvider.GetMetaObject(Expression parameter)
    parameters:
    - id: parameter
      type: System.Linq.Expressions.Expression
    return:
      type: System.Dynamic.DynamicMetaObject
    content.vb: Function System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(parameter As Expression) As DynamicMetaObject Implements IDynamicMetaObjectProvider.GetMetaObject
  overload: Mcma.McmaExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject*
  implements:
  - System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
  nameWithType.vb: McmaExpandoObject.System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression)
  name.vb: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression)
references:
- uid: Mcma
  commentId: N:Mcma
  name: Mcma
  nameWithType: Mcma
  fullName: Mcma
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  commentId: T:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<KeyValuePair<String, Object>>
  nameWithType: ICollection<KeyValuePair<String, Object>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: ICollection(Of KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, Object>>
  nameWithType: IEnumerable<KeyValuePair<String, Object>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: IEnumerable(Of KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Dynamic.IDynamicMetaObjectProvider
  commentId: T:System.Dynamic.IDynamicMetaObjectProvider
  parent: System.Dynamic
  isExternal: true
  name: IDynamicMetaObjectProvider
  nameWithType: IDynamicMetaObjectProvider
  fullName: System.Dynamic.IDynamicMetaObjectProvider
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Mcma.Serialization.McmaJson.ToMcmaJson(System.Boolean)
  commentId: M:Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
  parent: Mcma.Serialization.McmaJson
  definition: Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
  name: ToMcmaJson(Boolean)
  nameWithType: McmaJson.ToMcmaJson(Boolean)
  fullName: Mcma.Serialization.McmaJson.ToMcmaJson(System.Boolean)
  spec.csharp:
  - uid: Mcma.Serialization.McmaJson.ToMcmaJson(System.Boolean)
    name: ToMcmaJson
    nameWithType: McmaJson.ToMcmaJson
    fullName: Mcma.Serialization.McmaJson.ToMcmaJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mcma.Serialization.McmaJson.ToMcmaJson(System.Boolean)
    name: ToMcmaJson
    nameWithType: McmaJson.ToMcmaJson
    fullName: Mcma.Serialization.McmaJson.ToMcmaJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Mcma.Data.DocumentDatabase.Queries.HelperExtensions.ToFilterExpression``1
  commentId: M:Mcma.Data.DocumentDatabase.Queries.HelperExtensions.ToFilterExpression``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  parent: Mcma.Data.DocumentDatabase.Queries.HelperExtensions
  definition: Mcma.Data.DocumentDatabase.Queries.HelperExtensions.ToFilterExpression``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  name: ToFilterExpression<T>()
  nameWithType: HelperExtensions.ToFilterExpression<T>()
  fullName: Mcma.Data.DocumentDatabase.Queries.HelperExtensions.ToFilterExpression<T>()
  nameWithType.vb: HelperExtensions.ToFilterExpression(Of T)()
  fullName.vb: Mcma.Data.DocumentDatabase.Queries.HelperExtensions.ToFilterExpression(Of T)()
  name.vb: ToFilterExpression(Of T)()
  spec.csharp:
  - uid: Mcma.Data.DocumentDatabase.Queries.HelperExtensions.ToFilterExpression``1
    name: ToFilterExpression<T>
    nameWithType: HelperExtensions.ToFilterExpression<T>
    fullName: Mcma.Data.DocumentDatabase.Queries.HelperExtensions.ToFilterExpression<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mcma.Data.DocumentDatabase.Queries.HelperExtensions.ToFilterExpression``1
    name: ToFilterExpression(Of T)
    nameWithType: HelperExtensions.ToFilterExpression(Of T)
    fullName: Mcma.Data.DocumentDatabase.Queries.HelperExtensions.ToFilterExpression(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Dynamic
  commentId: N:System.Dynamic
  isExternal: true
  name: System.Dynamic
  nameWithType: System.Dynamic
  fullName: System.Dynamic
- uid: Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
  commentId: M:Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
  isExternal: true
  name: ToMcmaJson(Object, Boolean)
  nameWithType: McmaJson.ToMcmaJson(Object, Boolean)
  fullName: Mcma.Serialization.McmaJson.ToMcmaJson(System.Object, System.Boolean)
  spec.csharp:
  - uid: Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
    name: ToMcmaJson
    nameWithType: McmaJson.ToMcmaJson
    fullName: Mcma.Serialization.McmaJson.ToMcmaJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mcma.Serialization.McmaJson.ToMcmaJson(System.Object,System.Boolean)
    name: ToMcmaJson
    nameWithType: McmaJson.ToMcmaJson
    fullName: Mcma.Serialization.McmaJson.ToMcmaJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.Serialization.McmaJson
  commentId: T:Mcma.Serialization.McmaJson
  parent: Mcma.Serialization
  name: McmaJson
  nameWithType: McmaJson
  fullName: Mcma.Serialization.McmaJson
- uid: Mcma.Data.DocumentDatabase.Queries.HelperExtensions.ToFilterExpression``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  commentId: M:Mcma.Data.DocumentDatabase.Queries.HelperExtensions.ToFilterExpression``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  isExternal: true
  name: ToFilterExpression<T>(IEnumerable<KeyValuePair<String, Object>>)
  nameWithType: HelperExtensions.ToFilterExpression<T>(IEnumerable<KeyValuePair<String, Object>>)
  fullName: Mcma.Data.DocumentDatabase.Queries.HelperExtensions.ToFilterExpression<T>(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>)
  nameWithType.vb: HelperExtensions.ToFilterExpression(Of T)(IEnumerable(Of KeyValuePair(Of String, Object)))
  fullName.vb: Mcma.Data.DocumentDatabase.Queries.HelperExtensions.ToFilterExpression(Of T)(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)))
  name.vb: ToFilterExpression(Of T)(IEnumerable(Of KeyValuePair(Of String, Object)))
  spec.csharp:
  - uid: Mcma.Data.DocumentDatabase.Queries.HelperExtensions.ToFilterExpression``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
    name: ToFilterExpression<T>
    nameWithType: HelperExtensions.ToFilterExpression<T>
    fullName: Mcma.Data.DocumentDatabase.Queries.HelperExtensions.ToFilterExpression<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mcma.Data.DocumentDatabase.Queries.HelperExtensions.ToFilterExpression``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
    name: ToFilterExpression(Of T)
    nameWithType: HelperExtensions.ToFilterExpression(Of T)
    fullName: Mcma.Data.DocumentDatabase.Queries.HelperExtensions.ToFilterExpression(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.Data.DocumentDatabase.Queries.HelperExtensions
  commentId: T:Mcma.Data.DocumentDatabase.Queries.HelperExtensions
  parent: Mcma.Data.DocumentDatabase.Queries
  name: HelperExtensions
  nameWithType: HelperExtensions
  fullName: Mcma.Data.DocumentDatabase.Queries.HelperExtensions
- uid: Mcma.Serialization
  commentId: N:Mcma.Serialization
  name: Mcma.Serialization
  nameWithType: Mcma.Serialization
  fullName: Mcma.Serialization
- uid: Mcma.Data.DocumentDatabase.Queries
  commentId: N:Mcma.Data.DocumentDatabase.Queries
  name: Mcma.Data.DocumentDatabase.Queries
  nameWithType: Mcma.Data.DocumentDatabase.Queries
  fullName: Mcma.Data.DocumentDatabase.Queries
- uid: Mcma.McmaExpandoObject.Item*
  commentId: Overload:Mcma.McmaExpandoObject.Item
  name: Item
  nameWithType: McmaExpandoObject.Item
  fullName: Mcma.McmaExpandoObject.Item
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.Item(System.String)
  commentId: P:System.Collections.Generic.IDictionary{System.String,System.Object}.Item(System.String)
  parent: System.Collections.Generic.IDictionary{System.String,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Item(`0)
  name: Item[String]
  nameWithType: IDictionary<String, Object>.Item[String]
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Item[System.String]
  nameWithType.vb: IDictionary(Of String, Object).Item(String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object).Item(System.String)
  name.vb: Item(String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary<String, Object>.Item
    fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary(Of String, Object).Item
    fullName: System.Collections.Generic.IDictionary(Of System.String, System.Object).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IDictionary`2.Item(`0)
  commentId: P:System.Collections.Generic.IDictionary`2.Item(`0)
  isExternal: true
  name: Item[TKey]
  nameWithType: IDictionary<TKey, TValue>.Item[TKey]
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item[TKey]
  nameWithType.vb: IDictionary(Of TKey, TValue).Item(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary<TKey, TValue>.Item
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary(Of TKey, TValue).Item
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.McmaExpandoObject.HasProperty*
  commentId: Overload:Mcma.McmaExpandoObject.HasProperty
  name: HasProperty
  nameWithType: McmaExpandoObject.HasProperty
  fullName: Mcma.McmaExpandoObject.HasProperty
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.InvalidCastException
  commentId: T:System.InvalidCastException
  isExternal: true
- uid: Mcma.McmaExpandoObject.Get*
  commentId: Overload:Mcma.McmaExpandoObject.Get
  name: Get
  nameWithType: McmaExpandoObject.Get
  fullName: Mcma.McmaExpandoObject.Get
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Mcma.McmaExpandoObject.GetOrAdd*
  commentId: Overload:Mcma.McmaExpandoObject.GetOrAdd
  name: GetOrAdd
  nameWithType: McmaExpandoObject.GetOrAdd
  fullName: Mcma.McmaExpandoObject.GetOrAdd
- uid: Mcma.McmaExpandoObject.TryGet*
  commentId: Overload:Mcma.McmaExpandoObject.TryGet
  name: TryGet
  nameWithType: McmaExpandoObject.TryGet
  fullName: Mcma.McmaExpandoObject.TryGet
- uid: Mcma.McmaExpandoObject.Set*
  commentId: Overload:Mcma.McmaExpandoObject.Set
  name: Set
  nameWithType: McmaExpandoObject.Set
  fullName: Mcma.McmaExpandoObject.Set
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Keys*
  commentId: Overload:Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Keys
  name: IDictionary<String, Object>.Keys
  nameWithType: McmaExpandoObject.IDictionary<String, Object>.Keys
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String, System.Object>.Keys
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.Keys
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.Keys
  name.vb: System.Collections.Generic.IDictionary<System.String,System.Object>.Keys
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.Keys
  commentId: P:System.Collections.Generic.IDictionary{System.String,System.Object}.Keys
  parent: System.Collections.Generic.IDictionary{System.String,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Keys
  name: Keys
  nameWithType: IDictionary<String, Object>.Keys
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Keys
  nameWithType.vb: IDictionary(Of String, Object).Keys
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object).Keys
- uid: System.Collections.Generic.ICollection{System.String}
  commentId: T:System.Collections.Generic.ICollection{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<String>
  nameWithType: ICollection<String>
  fullName: System.Collections.Generic.ICollection<System.String>
  nameWithType.vb: ICollection(Of String)
  fullName.vb: System.Collections.Generic.ICollection(Of System.String)
  name.vb: ICollection(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Keys
  commentId: P:System.Collections.Generic.IDictionary`2.Keys
  isExternal: true
  name: Keys
  nameWithType: IDictionary<TKey, TValue>.Keys
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Keys
  nameWithType.vb: IDictionary(Of TKey, TValue).Keys
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Keys
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Values*
  commentId: Overload:Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Values
  name: IDictionary<String, Object>.Values
  nameWithType: McmaExpandoObject.IDictionary<String, Object>.Values
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String, System.Object>.Values
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.Values
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.Values
  name.vb: System.Collections.Generic.IDictionary<System.String,System.Object>.Values
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.Values
  commentId: P:System.Collections.Generic.IDictionary{System.String,System.Object}.Values
  parent: System.Collections.Generic.IDictionary{System.String,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Values
  name: Values
  nameWithType: IDictionary<String, Object>.Values
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Values
  nameWithType.vb: IDictionary(Of String, Object).Values
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object).Values
- uid: System.Collections.Generic.ICollection{System.Object}
  commentId: T:System.Collections.Generic.ICollection{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Object>
  nameWithType: ICollection<Object>
  fullName: System.Collections.Generic.ICollection<System.Object>
  nameWithType.vb: ICollection(Of Object)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Object)
  name.vb: ICollection(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Values
  commentId: P:System.Collections.Generic.IDictionary`2.Values
  isExternal: true
  name: Values
  nameWithType: IDictionary<TKey, TValue>.Values
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Values
  nameWithType.vb: IDictionary(Of TKey, TValue).Values
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Values
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Count*
  commentId: Overload:Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Count
  name: ICollection<KeyValuePair<String, Object>>.Count
  nameWithType: McmaExpandoObject.ICollection<KeyValuePair<String, Object>>.Count
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Count
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Count
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Count
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Count
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Count
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Count
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<KeyValuePair<String, Object>>.Count
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Count
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object)).Count
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#IsReadOnly*
  commentId: Overload:Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#IsReadOnly
  name: ICollection<KeyValuePair<String, Object>>.IsReadOnly
  nameWithType: McmaExpandoObject.ICollection<KeyValuePair<String, Object>>.IsReadOnly
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.IsReadOnly
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<KeyValuePair<String, Object>>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.IsReadOnly
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object)).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Add*
  commentId: Overload:Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Add
  name: IDictionary<String, Object>.Add
  nameWithType: McmaExpandoObject.IDictionary<String, Object>.Add
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String, System.Object>.Add
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.Add
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.Add
  name.vb: System.Collections.Generic.IDictionary<System.String,System.Object>.Add
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.Add(System.String,System.Object)
  commentId: M:System.Collections.Generic.IDictionary{System.String,System.Object}.Add(System.String,System.Object)
  parent: System.Collections.Generic.IDictionary{System.String,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  name: Add(String, Object)
  nameWithType: IDictionary<String, Object>.Add(String, Object)
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Add(System.String, System.Object)
  nameWithType.vb: IDictionary(Of String, Object).Add(String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object).Add(System.String, System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary<String, Object>.Add
    fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary(Of String, Object).Add
    fullName: System.Collections.Generic.IDictionary(Of System.String, System.Object).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  commentId: M:System.Collections.Generic.IDictionary`2.Add(`0,`1)
  isExternal: true
  name: Add(TKey, TValue)
  nameWithType: IDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).Add(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Add(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary<TKey, TValue>.Add
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary(Of TKey, TValue).Add
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add*
  commentId: Overload:Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add
  name: ICollection<KeyValuePair<String, Object>>.Add
  nameWithType: McmaExpandoObject.ICollection<KeyValuePair<String, Object>>.Add
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Add
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(KeyValuePair<String, Object>)
  nameWithType: ICollection<KeyValuePair<String, Object>>.Add(KeyValuePair<String, Object>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Add(System.Collections.Generic.KeyValuePair<System.String, System.Object>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object)).Add(KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Add(System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: Add(KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<KeyValuePair<String, Object>>.Add
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of KeyValuePair(Of String, Object)).Add
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{System.String,System.Object}
  commentId: T:System.Collections.Generic.KeyValuePair{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<String, Object>
  nameWithType: KeyValuePair<String, Object>
  fullName: System.Collections.Generic.KeyValuePair<System.String, System.Object>
  nameWithType.vb: KeyValuePair(Of String, Object)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of System.String, System.Object)
  name.vb: KeyValuePair(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Clear*
  commentId: Overload:Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Clear
  name: ICollection<KeyValuePair<String, Object>>.Clear
  nameWithType: McmaExpandoObject.ICollection<KeyValuePair<String, Object>>.Clear
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Clear
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Clear
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Clear
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Clear
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Clear
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Clear
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<KeyValuePair<String, Object>>.Clear()
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Clear()
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object)).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<KeyValuePair<String, Object>>.Clear
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of KeyValuePair(Of String, Object)).Clear
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains*
  commentId: Overload:Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains
  name: ICollection<KeyValuePair<String, Object>>.Contains
  nameWithType: McmaExpandoObject.ICollection<KeyValuePair<String, Object>>.Contains
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Contains
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(KeyValuePair<String, Object>)
  nameWithType: ICollection<KeyValuePair<String, Object>>.Contains(KeyValuePair<String, Object>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Contains(System.Collections.Generic.KeyValuePair<System.String, System.Object>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object)).Contains(KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Contains(System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: Contains(KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<KeyValuePair<String, Object>>.Contains
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of KeyValuePair(Of String, Object)).Contains
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#ContainsKey*
  commentId: Overload:Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#ContainsKey
  name: IDictionary<String, Object>.ContainsKey
  nameWithType: McmaExpandoObject.IDictionary<String, Object>.ContainsKey
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String, System.Object>.ContainsKey
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.ContainsKey
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.ContainsKey
  name.vb: System.Collections.Generic.IDictionary<System.String,System.Object>.ContainsKey
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.ContainsKey(System.String)
  commentId: M:System.Collections.Generic.IDictionary{System.String,System.Object}.ContainsKey(System.String)
  parent: System.Collections.Generic.IDictionary{System.String,System.Object}
  definition: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  name: ContainsKey(String)
  nameWithType: IDictionary<String, Object>.ContainsKey(String)
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.ContainsKey(System.String)
  nameWithType.vb: IDictionary(Of String, Object).ContainsKey(String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object).ContainsKey(System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary<String, Object>.ContainsKey
    fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary(Of String, Object).ContainsKey
    fullName: System.Collections.Generic.IDictionary(Of System.String, System.Object).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  commentId: M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  isExternal: true
  name: ContainsKey(TKey)
  nameWithType: IDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).ContainsKey(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary<TKey, TValue>.ContainsKey
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary(Of TKey, TValue).ContainsKey
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo*
  commentId: Overload:Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo
  name: ICollection<KeyValuePair<String, Object>>.CopyTo
  nameWithType: McmaExpandoObject.ICollection<KeyValuePair<String, Object>>.CopyTo
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.CopyTo
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(KeyValuePair<String, Object>[], Int32)
  nameWithType: ICollection<KeyValuePair<String, Object>>.CopyTo(KeyValuePair<String, Object>[], Int32)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.Object>[], System.Int32)
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object)).CopyTo(KeyValuePair(Of String, Object)(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).CopyTo(System.Collections.Generic.KeyValuePair(Of System.String, System.Object)(), System.Int32)
  name.vb: CopyTo(KeyValuePair(Of String, Object)(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<KeyValuePair<String, Object>>.CopyTo
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of KeyValuePair(Of String, Object)).CopyTo
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{System.String,System.Object}[]
  isExternal: true
  name: KeyValuePair<String, Object>[]
  nameWithType: KeyValuePair<String, Object>[]
  fullName: System.Collections.Generic.KeyValuePair<System.String, System.Object>[]
  nameWithType.vb: KeyValuePair(Of String, Object)()
  fullName.vb: System.Collections.Generic.KeyValuePair(Of System.String, System.Object)()
  name.vb: KeyValuePair(Of String, Object)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator*
  commentId: Overload:Mcma.McmaExpandoObject.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator
  name: IEnumerable<KeyValuePair<String, Object>>.GetEnumerator
  nameWithType: McmaExpandoObject.IEnumerable<KeyValuePair<String, Object>>.GetEnumerator
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.GetEnumerator
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<KeyValuePair<String, Object>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, Object)).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<KeyValuePair<String, Object>>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of KeyValuePair(Of String, Object)).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<String, Object>>
  nameWithType: IEnumerator<KeyValuePair<String, Object>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: IEnumerator(Of KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Remove*
  commentId: Overload:Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Remove
  name: IDictionary<String, Object>.Remove
  nameWithType: McmaExpandoObject.IDictionary<String, Object>.Remove
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String, System.Object>.Remove
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.Remove
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.Remove
  name.vb: System.Collections.Generic.IDictionary<System.String,System.Object>.Remove
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.Remove(System.String)
  commentId: M:System.Collections.Generic.IDictionary{System.String,System.Object}.Remove(System.String)
  parent: System.Collections.Generic.IDictionary{System.String,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Remove(`0)
  name: Remove(String)
  nameWithType: IDictionary<String, Object>.Remove(String)
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Remove(System.String)
  nameWithType.vb: IDictionary(Of String, Object).Remove(String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object).Remove(System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary<String, Object>.Remove
    fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary(Of String, Object).Remove
    fullName: System.Collections.Generic.IDictionary(Of System.String, System.Object).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Remove(`0)
  commentId: M:System.Collections.Generic.IDictionary`2.Remove(`0)
  isExternal: true
  name: Remove(TKey)
  nameWithType: IDictionary<TKey, TValue>.Remove(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).Remove(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary<TKey, TValue>.Remove
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary(Of TKey, TValue).Remove
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove*
  commentId: Overload:Mcma.McmaExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove
  name: ICollection<KeyValuePair<String, Object>>.Remove
  nameWithType: McmaExpandoObject.ICollection<KeyValuePair<String, Object>>.Remove
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Remove
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(KeyValuePair<String, Object>)
  nameWithType: ICollection<KeyValuePair<String, Object>>.Remove(KeyValuePair<String, Object>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Remove(System.Collections.Generic.KeyValuePair<System.String, System.Object>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object)).Remove(KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Remove(System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: Remove(KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<KeyValuePair<String, Object>>.Remove
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of KeyValuePair(Of String, Object)).Remove
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#TryGetValue*
  commentId: Overload:Mcma.McmaExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#TryGetValue
  name: IDictionary<String, Object>.TryGetValue
  nameWithType: McmaExpandoObject.IDictionary<String, Object>.TryGetValue
  fullName: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String, System.Object>.TryGetValue
  nameWithType.vb: McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.TryGetValue
  fullName.vb: Mcma.McmaExpandoObject.System.Collections.Generic.IDictionary<System.String,System.Object>.TryGetValue
  name.vb: System.Collections.Generic.IDictionary<System.String,System.Object>.TryGetValue
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.TryGetValue(System.String,System.Object@)
  commentId: M:System.Collections.Generic.IDictionary{System.String,System.Object}.TryGetValue(System.String,System.Object@)
  parent: System.Collections.Generic.IDictionary{System.String,System.Object}
  definition: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  name: TryGetValue(String, Object)
  nameWithType: IDictionary<String, Object>.TryGetValue(String, Object)
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.TryGetValue(System.String, System.Object)
  nameWithType.vb: IDictionary(Of String, Object).TryGetValue(String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object).TryGetValue(System.String, System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary<String, Object>.TryGetValue
    fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary(Of String, Object).TryGetValue
    fullName: System.Collections.Generic.IDictionary(Of System.String, System.Object).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  commentId: M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  isExternal: true
  name: TryGetValue(TKey, TValue)
  nameWithType: IDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary<TKey, TValue>.TryGetValue
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary(Of TKey, TValue).TryGetValue
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.McmaExpandoObject.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Mcma.McmaExpandoObject.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: McmaExpandoObject.IEnumerable.GetEnumerator
  fullName: Mcma.McmaExpandoObject.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: McmaExpandoObject.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Mcma.McmaExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject*
  commentId: Overload:Mcma.McmaExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject
  name: IDynamicMetaObjectProvider.GetMetaObject
  nameWithType: McmaExpandoObject.IDynamicMetaObjectProvider.GetMetaObject
  fullName: Mcma.McmaExpandoObject.System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject
  nameWithType.vb: McmaExpandoObject.System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject
  name.vb: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject
- uid: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
  commentId: M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
  parent: System.Dynamic.IDynamicMetaObjectProvider
  isExternal: true
  name: GetMetaObject(Expression)
  nameWithType: IDynamicMetaObjectProvider.GetMetaObject(Expression)
  fullName: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
    name: GetMetaObject
    nameWithType: IDynamicMetaObjectProvider.GetMetaObject
    fullName: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
    name: GetMetaObject
    nameWithType: IDynamicMetaObjectProvider.GetMetaObject
    fullName: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Dynamic.DynamicMetaObject
  commentId: T:System.Dynamic.DynamicMetaObject
  parent: System.Dynamic
  isExternal: true
  name: DynamicMetaObject
  nameWithType: DynamicMetaObject
  fullName: System.Dynamic.DynamicMetaObject
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
