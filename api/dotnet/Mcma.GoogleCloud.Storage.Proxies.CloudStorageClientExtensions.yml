### YamlMime:ManagedReference
items:
- uid: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions
  commentId: T:Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions
  id: CloudStorageClientExtensions
  parent: Mcma.GoogleCloud.Storage.Proxies
  children:
  - Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.DownloadLocatorAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFileLocator,System.IO.Stream,Google.Cloud.Storage.V1.DownloadObjectOptions,System.Threading.CancellationToken,System.IProgress{Google.Apis.Download.IDownloadProgress})
  - Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.DownloadLocatorToFileAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFileLocator,System.String,Google.Cloud.Storage.V1.DownloadObjectOptions,System.Threading.CancellationToken,System.IProgress{Google.Apis.Download.IDownloadProgress})
  - Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.GetLocatorSignedUrlAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFileLocator,System.Nullable{System.TimeSpan},Google.Cloud.Storage.V1.SigningVersion,System.Threading.CancellationToken)
  - Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadFileToFolderAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFolderLocator,System.String,System.String,Google.Cloud.Storage.V1.UploadObjectOptions,System.Action{Google.Apis.Upload.IUploadProgress})
  - Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadTextToFolderAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFolderLocator,System.String,System.String,Google.Cloud.Storage.V1.UploadObjectOptions,System.Action{Google.Apis.Upload.IUploadProgress})
  - Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadToFolderAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFolderLocator,System.String,System.IO.Stream,Google.Cloud.Storage.V1.UploadObjectOptions,System.Action{Google.Apis.Upload.IUploadProgress})
  langs:
  - csharp
  - vb
  name: CloudStorageClientExtensions
  nameWithType: CloudStorageClientExtensions
  fullName: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions
  type: Class
  source:
    remote:
      path: GoogleCloud/Mcma.GoogleCloud.Storage/CloudStorageClientExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: CloudStorageClientExtensions
    path: ../mcma-libraries-dotnet/GoogleCloud/Mcma.GoogleCloud.Storage/CloudStorageClientExtensions.cs
    startLine: 14
  assemblies:
  - Mcma.GoogleCloud.Storage
  namespace: Mcma.GoogleCloud.Storage.Proxies
  syntax:
    content: public static class CloudStorageClientExtensions
    content.vb: Public Module CloudStorageClientExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadToFolderAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFolderLocator,System.String,System.IO.Stream,Google.Cloud.Storage.V1.UploadObjectOptions,System.Action{Google.Apis.Upload.IUploadProgress})
  commentId: M:Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadToFolderAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFolderLocator,System.String,System.IO.Stream,Google.Cloud.Storage.V1.UploadObjectOptions,System.Action{Google.Apis.Upload.IUploadProgress})
  id: UploadToFolderAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFolderLocator,System.String,System.IO.Stream,Google.Cloud.Storage.V1.UploadObjectOptions,System.Action{Google.Apis.Upload.IUploadProgress})
  isExtensionMethod: true
  parent: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions
  langs:
  - csharp
  - vb
  name: UploadToFolderAsync(StorageClient, CloudStorageFolderLocator, String, Stream, UploadObjectOptions, Action<IUploadProgress>)
  nameWithType: CloudStorageClientExtensions.UploadToFolderAsync(StorageClient, CloudStorageFolderLocator, String, Stream, UploadObjectOptions, Action<IUploadProgress>)
  fullName: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadToFolderAsync(Google.Cloud.Storage.V1.StorageClient, Mcma.GoogleCloud.Storage.CloudStorageFolderLocator, System.String, System.IO.Stream, Google.Cloud.Storage.V1.UploadObjectOptions, System.Action<Google.Apis.Upload.IUploadProgress>)
  type: Method
  source:
    remote:
      path: GoogleCloud/Mcma.GoogleCloud.Storage/CloudStorageClientExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: UploadToFolderAsync
    path: ../mcma-libraries-dotnet/GoogleCloud/Mcma.GoogleCloud.Storage/CloudStorageClientExtensions.cs
    startLine: 16
  assemblies:
  - Mcma.GoogleCloud.Storage
  namespace: Mcma.GoogleCloud.Storage.Proxies
  syntax:
    content: public static Task<CloudStorageFileLocator> UploadToFolderAsync(this StorageClient storageClient, CloudStorageFolderLocator folderLocator, string fileName, Stream readFrom, UploadObjectOptions options = null, Action<IUploadProgress> progressHandler = null)
    parameters:
    - id: storageClient
      type: Google.Cloud.Storage.V1.StorageClient
    - id: folderLocator
      type: Mcma.GoogleCloud.Storage.CloudStorageFolderLocator
    - id: fileName
      type: System.String
    - id: readFrom
      type: System.IO.Stream
    - id: options
      type: Google.Cloud.Storage.V1.UploadObjectOptions
    - id: progressHandler
      type: System.Action{Google.Apis.Upload.IUploadProgress}
    return:
      type: System.Threading.Tasks.Task{Mcma.GoogleCloud.Storage.CloudStorageFileLocator}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UploadToFolderAsync(storageClient As StorageClient, folderLocator As CloudStorageFolderLocator, fileName As String, readFrom As Stream, options As UploadObjectOptions = Nothing, progressHandler As Action(Of IUploadProgress) = Nothing) As Task(Of CloudStorageFileLocator)
  overload: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadToFolderAsync*
  nameWithType.vb: CloudStorageClientExtensions.UploadToFolderAsync(StorageClient, CloudStorageFolderLocator, String, Stream, UploadObjectOptions, Action(Of IUploadProgress))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadToFolderAsync(Google.Cloud.Storage.V1.StorageClient, Mcma.GoogleCloud.Storage.CloudStorageFolderLocator, System.String, System.IO.Stream, Google.Cloud.Storage.V1.UploadObjectOptions, System.Action(Of Google.Apis.Upload.IUploadProgress))
  name.vb: UploadToFolderAsync(StorageClient, CloudStorageFolderLocator, String, Stream, UploadObjectOptions, Action(Of IUploadProgress))
- uid: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadFileToFolderAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFolderLocator,System.String,System.String,Google.Cloud.Storage.V1.UploadObjectOptions,System.Action{Google.Apis.Upload.IUploadProgress})
  commentId: M:Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadFileToFolderAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFolderLocator,System.String,System.String,Google.Cloud.Storage.V1.UploadObjectOptions,System.Action{Google.Apis.Upload.IUploadProgress})
  id: UploadFileToFolderAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFolderLocator,System.String,System.String,Google.Cloud.Storage.V1.UploadObjectOptions,System.Action{Google.Apis.Upload.IUploadProgress})
  isExtensionMethod: true
  parent: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions
  langs:
  - csharp
  - vb
  name: UploadFileToFolderAsync(StorageClient, CloudStorageFolderLocator, String, String, UploadObjectOptions, Action<IUploadProgress>)
  nameWithType: CloudStorageClientExtensions.UploadFileToFolderAsync(StorageClient, CloudStorageFolderLocator, String, String, UploadObjectOptions, Action<IUploadProgress>)
  fullName: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadFileToFolderAsync(Google.Cloud.Storage.V1.StorageClient, Mcma.GoogleCloud.Storage.CloudStorageFolderLocator, System.String, System.String, Google.Cloud.Storage.V1.UploadObjectOptions, System.Action<Google.Apis.Upload.IUploadProgress>)
  type: Method
  source:
    remote:
      path: GoogleCloud/Mcma.GoogleCloud.Storage/CloudStorageClientExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: UploadFileToFolderAsync
    path: ../mcma-libraries-dotnet/GoogleCloud/Mcma.GoogleCloud.Storage/CloudStorageClientExtensions.cs
    startLine: 31
  assemblies:
  - Mcma.GoogleCloud.Storage
  namespace: Mcma.GoogleCloud.Storage.Proxies
  syntax:
    content: public static Task<CloudStorageFileLocator> UploadFileToFolderAsync(this StorageClient storageClient, CloudStorageFolderLocator folderLocator, string filePath, string fileName = null, UploadObjectOptions options = null, Action<IUploadProgress> progressHandler = null)
    parameters:
    - id: storageClient
      type: Google.Cloud.Storage.V1.StorageClient
    - id: folderLocator
      type: Mcma.GoogleCloud.Storage.CloudStorageFolderLocator
    - id: filePath
      type: System.String
    - id: fileName
      type: System.String
    - id: options
      type: Google.Cloud.Storage.V1.UploadObjectOptions
    - id: progressHandler
      type: System.Action{Google.Apis.Upload.IUploadProgress}
    return:
      type: System.Threading.Tasks.Task{Mcma.GoogleCloud.Storage.CloudStorageFileLocator}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UploadFileToFolderAsync(storageClient As StorageClient, folderLocator As CloudStorageFolderLocator, filePath As String, fileName As String = Nothing, options As UploadObjectOptions = Nothing, progressHandler As Action(Of IUploadProgress) = Nothing) As Task(Of CloudStorageFileLocator)
  overload: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadFileToFolderAsync*
  nameWithType.vb: CloudStorageClientExtensions.UploadFileToFolderAsync(StorageClient, CloudStorageFolderLocator, String, String, UploadObjectOptions, Action(Of IUploadProgress))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadFileToFolderAsync(Google.Cloud.Storage.V1.StorageClient, Mcma.GoogleCloud.Storage.CloudStorageFolderLocator, System.String, System.String, Google.Cloud.Storage.V1.UploadObjectOptions, System.Action(Of Google.Apis.Upload.IUploadProgress))
  name.vb: UploadFileToFolderAsync(StorageClient, CloudStorageFolderLocator, String, String, UploadObjectOptions, Action(Of IUploadProgress))
- uid: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadTextToFolderAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFolderLocator,System.String,System.String,Google.Cloud.Storage.V1.UploadObjectOptions,System.Action{Google.Apis.Upload.IUploadProgress})
  commentId: M:Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadTextToFolderAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFolderLocator,System.String,System.String,Google.Cloud.Storage.V1.UploadObjectOptions,System.Action{Google.Apis.Upload.IUploadProgress})
  id: UploadTextToFolderAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFolderLocator,System.String,System.String,Google.Cloud.Storage.V1.UploadObjectOptions,System.Action{Google.Apis.Upload.IUploadProgress})
  isExtensionMethod: true
  parent: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions
  langs:
  - csharp
  - vb
  name: UploadTextToFolderAsync(StorageClient, CloudStorageFolderLocator, String, String, UploadObjectOptions, Action<IUploadProgress>)
  nameWithType: CloudStorageClientExtensions.UploadTextToFolderAsync(StorageClient, CloudStorageFolderLocator, String, String, UploadObjectOptions, Action<IUploadProgress>)
  fullName: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadTextToFolderAsync(Google.Cloud.Storage.V1.StorageClient, Mcma.GoogleCloud.Storage.CloudStorageFolderLocator, System.String, System.String, Google.Cloud.Storage.V1.UploadObjectOptions, System.Action<Google.Apis.Upload.IUploadProgress>)
  type: Method
  source:
    remote:
      path: GoogleCloud/Mcma.GoogleCloud.Storage/CloudStorageClientExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: UploadTextToFolderAsync
    path: ../mcma-libraries-dotnet/GoogleCloud/Mcma.GoogleCloud.Storage/CloudStorageClientExtensions.cs
    startLine: 43
  assemblies:
  - Mcma.GoogleCloud.Storage
  namespace: Mcma.GoogleCloud.Storage.Proxies
  syntax:
    content: public static Task<CloudStorageFileLocator> UploadTextToFolderAsync(this StorageClient storageClient, CloudStorageFolderLocator folderLocator, string fileName, string content, UploadObjectOptions options = null, Action<IUploadProgress> progressHandler = null)
    parameters:
    - id: storageClient
      type: Google.Cloud.Storage.V1.StorageClient
    - id: folderLocator
      type: Mcma.GoogleCloud.Storage.CloudStorageFolderLocator
    - id: fileName
      type: System.String
    - id: content
      type: System.String
    - id: options
      type: Google.Cloud.Storage.V1.UploadObjectOptions
    - id: progressHandler
      type: System.Action{Google.Apis.Upload.IUploadProgress}
    return:
      type: System.Threading.Tasks.Task{Mcma.GoogleCloud.Storage.CloudStorageFileLocator}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UploadTextToFolderAsync(storageClient As StorageClient, folderLocator As CloudStorageFolderLocator, fileName As String, content As String, options As UploadObjectOptions = Nothing, progressHandler As Action(Of IUploadProgress) = Nothing) As Task(Of CloudStorageFileLocator)
  overload: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadTextToFolderAsync*
  nameWithType.vb: CloudStorageClientExtensions.UploadTextToFolderAsync(StorageClient, CloudStorageFolderLocator, String, String, UploadObjectOptions, Action(Of IUploadProgress))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadTextToFolderAsync(Google.Cloud.Storage.V1.StorageClient, Mcma.GoogleCloud.Storage.CloudStorageFolderLocator, System.String, System.String, Google.Cloud.Storage.V1.UploadObjectOptions, System.Action(Of Google.Apis.Upload.IUploadProgress))
  name.vb: UploadTextToFolderAsync(StorageClient, CloudStorageFolderLocator, String, String, UploadObjectOptions, Action(Of IUploadProgress))
- uid: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.DownloadLocatorAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFileLocator,System.IO.Stream,Google.Cloud.Storage.V1.DownloadObjectOptions,System.Threading.CancellationToken,System.IProgress{Google.Apis.Download.IDownloadProgress})
  commentId: M:Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.DownloadLocatorAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFileLocator,System.IO.Stream,Google.Cloud.Storage.V1.DownloadObjectOptions,System.Threading.CancellationToken,System.IProgress{Google.Apis.Download.IDownloadProgress})
  id: DownloadLocatorAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFileLocator,System.IO.Stream,Google.Cloud.Storage.V1.DownloadObjectOptions,System.Threading.CancellationToken,System.IProgress{Google.Apis.Download.IDownloadProgress})
  isExtensionMethod: true
  parent: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions
  langs:
  - csharp
  - vb
  name: DownloadLocatorAsync(StorageClient, CloudStorageFileLocator, Stream, DownloadObjectOptions, CancellationToken, IProgress<IDownloadProgress>)
  nameWithType: CloudStorageClientExtensions.DownloadLocatorAsync(StorageClient, CloudStorageFileLocator, Stream, DownloadObjectOptions, CancellationToken, IProgress<IDownloadProgress>)
  fullName: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.DownloadLocatorAsync(Google.Cloud.Storage.V1.StorageClient, Mcma.GoogleCloud.Storage.CloudStorageFileLocator, System.IO.Stream, Google.Cloud.Storage.V1.DownloadObjectOptions, System.Threading.CancellationToken, System.IProgress<Google.Apis.Download.IDownloadProgress>)
  type: Method
  source:
    remote:
      path: GoogleCloud/Mcma.GoogleCloud.Storage/CloudStorageClientExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: DownloadLocatorAsync
    path: ../mcma-libraries-dotnet/GoogleCloud/Mcma.GoogleCloud.Storage/CloudStorageClientExtensions.cs
    startLine: 54
  assemblies:
  - Mcma.GoogleCloud.Storage
  namespace: Mcma.GoogleCloud.Storage.Proxies
  syntax:
    content: public static Task DownloadLocatorAsync(this StorageClient storageClient, CloudStorageFileLocator fileLocator, Stream downloadTo, DownloadObjectOptions options = null, CancellationToken cancellationToken = default(CancellationToken), IProgress<IDownloadProgress> progressHandler = null)
    parameters:
    - id: storageClient
      type: Google.Cloud.Storage.V1.StorageClient
    - id: fileLocator
      type: Mcma.GoogleCloud.Storage.CloudStorageFileLocator
    - id: downloadTo
      type: System.IO.Stream
    - id: options
      type: Google.Cloud.Storage.V1.DownloadObjectOptions
    - id: cancellationToken
      type: System.Threading.CancellationToken
    - id: progressHandler
      type: System.IProgress{Google.Apis.Download.IDownloadProgress}
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DownloadLocatorAsync(storageClient As StorageClient, fileLocator As CloudStorageFileLocator, downloadTo As Stream, options As DownloadObjectOptions = Nothing, cancellationToken As CancellationToken = Nothing, progressHandler As IProgress(Of IDownloadProgress) = Nothing) As Task
  overload: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.DownloadLocatorAsync*
  nameWithType.vb: CloudStorageClientExtensions.DownloadLocatorAsync(StorageClient, CloudStorageFileLocator, Stream, DownloadObjectOptions, CancellationToken, IProgress(Of IDownloadProgress))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.DownloadLocatorAsync(Google.Cloud.Storage.V1.StorageClient, Mcma.GoogleCloud.Storage.CloudStorageFileLocator, System.IO.Stream, Google.Cloud.Storage.V1.DownloadObjectOptions, System.Threading.CancellationToken, System.IProgress(Of Google.Apis.Download.IDownloadProgress))
  name.vb: DownloadLocatorAsync(StorageClient, CloudStorageFileLocator, Stream, DownloadObjectOptions, CancellationToken, IProgress(Of IDownloadProgress))
- uid: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.DownloadLocatorToFileAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFileLocator,System.String,Google.Cloud.Storage.V1.DownloadObjectOptions,System.Threading.CancellationToken,System.IProgress{Google.Apis.Download.IDownloadProgress})
  commentId: M:Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.DownloadLocatorToFileAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFileLocator,System.String,Google.Cloud.Storage.V1.DownloadObjectOptions,System.Threading.CancellationToken,System.IProgress{Google.Apis.Download.IDownloadProgress})
  id: DownloadLocatorToFileAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFileLocator,System.String,Google.Cloud.Storage.V1.DownloadObjectOptions,System.Threading.CancellationToken,System.IProgress{Google.Apis.Download.IDownloadProgress})
  isExtensionMethod: true
  parent: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions
  langs:
  - csharp
  - vb
  name: DownloadLocatorToFileAsync(StorageClient, CloudStorageFileLocator, String, DownloadObjectOptions, CancellationToken, IProgress<IDownloadProgress>)
  nameWithType: CloudStorageClientExtensions.DownloadLocatorToFileAsync(StorageClient, CloudStorageFileLocator, String, DownloadObjectOptions, CancellationToken, IProgress<IDownloadProgress>)
  fullName: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.DownloadLocatorToFileAsync(Google.Cloud.Storage.V1.StorageClient, Mcma.GoogleCloud.Storage.CloudStorageFileLocator, System.String, Google.Cloud.Storage.V1.DownloadObjectOptions, System.Threading.CancellationToken, System.IProgress<Google.Apis.Download.IDownloadProgress>)
  type: Method
  source:
    remote:
      path: GoogleCloud/Mcma.GoogleCloud.Storage/CloudStorageClientExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: DownloadLocatorToFileAsync
    path: ../mcma-libraries-dotnet/GoogleCloud/Mcma.GoogleCloud.Storage/CloudStorageClientExtensions.cs
    startLine: 62
  assemblies:
  - Mcma.GoogleCloud.Storage
  namespace: Mcma.GoogleCloud.Storage.Proxies
  syntax:
    content: public static Task DownloadLocatorToFileAsync(this StorageClient storageClient, CloudStorageFileLocator fileLocator, string filePath, DownloadObjectOptions options = null, CancellationToken cancellationToken = default(CancellationToken), IProgress<IDownloadProgress> progressHandler = null)
    parameters:
    - id: storageClient
      type: Google.Cloud.Storage.V1.StorageClient
    - id: fileLocator
      type: Mcma.GoogleCloud.Storage.CloudStorageFileLocator
    - id: filePath
      type: System.String
    - id: options
      type: Google.Cloud.Storage.V1.DownloadObjectOptions
    - id: cancellationToken
      type: System.Threading.CancellationToken
    - id: progressHandler
      type: System.IProgress{Google.Apis.Download.IDownloadProgress}
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DownloadLocatorToFileAsync(storageClient As StorageClient, fileLocator As CloudStorageFileLocator, filePath As String, options As DownloadObjectOptions = Nothing, cancellationToken As CancellationToken = Nothing, progressHandler As IProgress(Of IDownloadProgress) = Nothing) As Task
  overload: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.DownloadLocatorToFileAsync*
  nameWithType.vb: CloudStorageClientExtensions.DownloadLocatorToFileAsync(StorageClient, CloudStorageFileLocator, String, DownloadObjectOptions, CancellationToken, IProgress(Of IDownloadProgress))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.DownloadLocatorToFileAsync(Google.Cloud.Storage.V1.StorageClient, Mcma.GoogleCloud.Storage.CloudStorageFileLocator, System.String, Google.Cloud.Storage.V1.DownloadObjectOptions, System.Threading.CancellationToken, System.IProgress(Of Google.Apis.Download.IDownloadProgress))
  name.vb: DownloadLocatorToFileAsync(StorageClient, CloudStorageFileLocator, String, DownloadObjectOptions, CancellationToken, IProgress(Of IDownloadProgress))
- uid: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.GetLocatorSignedUrlAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFileLocator,System.Nullable{System.TimeSpan},Google.Cloud.Storage.V1.SigningVersion,System.Threading.CancellationToken)
  commentId: M:Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.GetLocatorSignedUrlAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFileLocator,System.Nullable{System.TimeSpan},Google.Cloud.Storage.V1.SigningVersion,System.Threading.CancellationToken)
  id: GetLocatorSignedUrlAsync(Google.Cloud.Storage.V1.StorageClient,Mcma.GoogleCloud.Storage.CloudStorageFileLocator,System.Nullable{System.TimeSpan},Google.Cloud.Storage.V1.SigningVersion,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions
  langs:
  - csharp
  - vb
  name: GetLocatorSignedUrlAsync(StorageClient, CloudStorageFileLocator, Nullable<TimeSpan>, SigningVersion, CancellationToken)
  nameWithType: CloudStorageClientExtensions.GetLocatorSignedUrlAsync(StorageClient, CloudStorageFileLocator, Nullable<TimeSpan>, SigningVersion, CancellationToken)
  fullName: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.GetLocatorSignedUrlAsync(Google.Cloud.Storage.V1.StorageClient, Mcma.GoogleCloud.Storage.CloudStorageFileLocator, System.Nullable<System.TimeSpan>, Google.Cloud.Storage.V1.SigningVersion, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: GoogleCloud/Mcma.GoogleCloud.Storage/CloudStorageClientExtensions.cs
      branch: documentation
      repo: https://github.com/ebu/mcma-libraries-dotnet.git
    id: GetLocatorSignedUrlAsync
    path: ../mcma-libraries-dotnet/GoogleCloud/Mcma.GoogleCloud.Storage/CloudStorageClientExtensions.cs
    startLine: 73
  assemblies:
  - Mcma.GoogleCloud.Storage
  namespace: Mcma.GoogleCloud.Storage.Proxies
  syntax:
    content: public static Task<string> GetLocatorSignedUrlAsync(this StorageClient storageClient, CloudStorageFileLocator fileLocator, TimeSpan? validFor = default(TimeSpan? ), SigningVersion signingVersion = SigningVersion.Default, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: storageClient
      type: Google.Cloud.Storage.V1.StorageClient
    - id: fileLocator
      type: Mcma.GoogleCloud.Storage.CloudStorageFileLocator
    - id: validFor
      type: System.Nullable{System.TimeSpan}
    - id: signingVersion
      type: Google.Cloud.Storage.V1.SigningVersion
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetLocatorSignedUrlAsync(storageClient As StorageClient, fileLocator As CloudStorageFileLocator, validFor As TimeSpan? = Nothing, signingVersion As SigningVersion = SigningVersion.Default, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.GetLocatorSignedUrlAsync*
  nameWithType.vb: CloudStorageClientExtensions.GetLocatorSignedUrlAsync(StorageClient, CloudStorageFileLocator, Nullable(Of TimeSpan), SigningVersion, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.GetLocatorSignedUrlAsync(Google.Cloud.Storage.V1.StorageClient, Mcma.GoogleCloud.Storage.CloudStorageFileLocator, System.Nullable(Of System.TimeSpan), Google.Cloud.Storage.V1.SigningVersion, System.Threading.CancellationToken)
  name.vb: GetLocatorSignedUrlAsync(StorageClient, CloudStorageFileLocator, Nullable(Of TimeSpan), SigningVersion, CancellationToken)
references:
- uid: Mcma.GoogleCloud.Storage.Proxies
  commentId: N:Mcma.GoogleCloud.Storage.Proxies
  name: Mcma.GoogleCloud.Storage.Proxies
  nameWithType: Mcma.GoogleCloud.Storage.Proxies
  fullName: Mcma.GoogleCloud.Storage.Proxies
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadToFolderAsync*
  commentId: Overload:Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadToFolderAsync
  name: UploadToFolderAsync
  nameWithType: CloudStorageClientExtensions.UploadToFolderAsync
  fullName: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadToFolderAsync
- uid: Google.Cloud.Storage.V1.StorageClient
  commentId: T:Google.Cloud.Storage.V1.StorageClient
  parent: Google.Cloud.Storage.V1
  isExternal: true
  name: StorageClient
  nameWithType: StorageClient
  fullName: Google.Cloud.Storage.V1.StorageClient
- uid: Mcma.GoogleCloud.Storage.CloudStorageFolderLocator
  commentId: T:Mcma.GoogleCloud.Storage.CloudStorageFolderLocator
  parent: Mcma.GoogleCloud.Storage
  name: CloudStorageFolderLocator
  nameWithType: CloudStorageFolderLocator
  fullName: Mcma.GoogleCloud.Storage.CloudStorageFolderLocator
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: Google.Cloud.Storage.V1.UploadObjectOptions
  commentId: T:Google.Cloud.Storage.V1.UploadObjectOptions
  parent: Google.Cloud.Storage.V1
  isExternal: true
  name: UploadObjectOptions
  nameWithType: UploadObjectOptions
  fullName: Google.Cloud.Storage.V1.UploadObjectOptions
- uid: System.Action{Google.Apis.Upload.IUploadProgress}
  commentId: T:System.Action{Google.Apis.Upload.IUploadProgress}
  parent: System
  definition: System.Action`1
  name: Action<IUploadProgress>
  nameWithType: Action<IUploadProgress>
  fullName: System.Action<Google.Apis.Upload.IUploadProgress>
  nameWithType.vb: Action(Of IUploadProgress)
  fullName.vb: System.Action(Of Google.Apis.Upload.IUploadProgress)
  name.vb: Action(Of IUploadProgress)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Apis.Upload.IUploadProgress
    name: IUploadProgress
    nameWithType: IUploadProgress
    fullName: Google.Apis.Upload.IUploadProgress
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Apis.Upload.IUploadProgress
    name: IUploadProgress
    nameWithType: IUploadProgress
    fullName: Google.Apis.Upload.IUploadProgress
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Mcma.GoogleCloud.Storage.CloudStorageFileLocator}
  commentId: T:System.Threading.Tasks.Task{Mcma.GoogleCloud.Storage.CloudStorageFileLocator}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<CloudStorageFileLocator>
  nameWithType: Task<CloudStorageFileLocator>
  fullName: System.Threading.Tasks.Task<Mcma.GoogleCloud.Storage.CloudStorageFileLocator>
  nameWithType.vb: Task(Of CloudStorageFileLocator)
  fullName.vb: System.Threading.Tasks.Task(Of Mcma.GoogleCloud.Storage.CloudStorageFileLocator)
  name.vb: Task(Of CloudStorageFileLocator)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mcma.GoogleCloud.Storage.CloudStorageFileLocator
    name: CloudStorageFileLocator
    nameWithType: CloudStorageFileLocator
    fullName: Mcma.GoogleCloud.Storage.CloudStorageFileLocator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mcma.GoogleCloud.Storage.CloudStorageFileLocator
    name: CloudStorageFileLocator
    nameWithType: CloudStorageFileLocator
    fullName: Mcma.GoogleCloud.Storage.CloudStorageFileLocator
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Cloud.Storage.V1
  commentId: N:Google.Cloud.Storage.V1
  isExternal: true
  name: Google.Cloud.Storage.V1
  nameWithType: Google.Cloud.Storage.V1
  fullName: Google.Cloud.Storage.V1
- uid: Mcma.GoogleCloud.Storage
  commentId: N:Mcma.GoogleCloud.Storage
  name: Mcma.GoogleCloud.Storage
  nameWithType: Mcma.GoogleCloud.Storage
  fullName: Mcma.GoogleCloud.Storage
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadFileToFolderAsync*
  commentId: Overload:Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadFileToFolderAsync
  name: UploadFileToFolderAsync
  nameWithType: CloudStorageClientExtensions.UploadFileToFolderAsync
  fullName: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadFileToFolderAsync
- uid: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadTextToFolderAsync*
  commentId: Overload:Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadTextToFolderAsync
  name: UploadTextToFolderAsync
  nameWithType: CloudStorageClientExtensions.UploadTextToFolderAsync
  fullName: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.UploadTextToFolderAsync
- uid: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.DownloadLocatorAsync*
  commentId: Overload:Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.DownloadLocatorAsync
  name: DownloadLocatorAsync
  nameWithType: CloudStorageClientExtensions.DownloadLocatorAsync
  fullName: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.DownloadLocatorAsync
- uid: Mcma.GoogleCloud.Storage.CloudStorageFileLocator
  commentId: T:Mcma.GoogleCloud.Storage.CloudStorageFileLocator
  parent: Mcma.GoogleCloud.Storage
  name: CloudStorageFileLocator
  nameWithType: CloudStorageFileLocator
  fullName: Mcma.GoogleCloud.Storage.CloudStorageFileLocator
- uid: Google.Cloud.Storage.V1.DownloadObjectOptions
  commentId: T:Google.Cloud.Storage.V1.DownloadObjectOptions
  parent: Google.Cloud.Storage.V1
  isExternal: true
  name: DownloadObjectOptions
  nameWithType: DownloadObjectOptions
  fullName: Google.Cloud.Storage.V1.DownloadObjectOptions
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.IProgress{Google.Apis.Download.IDownloadProgress}
  commentId: T:System.IProgress{Google.Apis.Download.IDownloadProgress}
  parent: System
  definition: System.IProgress`1
  name: IProgress<IDownloadProgress>
  nameWithType: IProgress<IDownloadProgress>
  fullName: System.IProgress<Google.Apis.Download.IDownloadProgress>
  nameWithType.vb: IProgress(Of IDownloadProgress)
  fullName.vb: System.IProgress(Of Google.Apis.Download.IDownloadProgress)
  name.vb: IProgress(Of IDownloadProgress)
  spec.csharp:
  - uid: System.IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: System.IProgress
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Apis.Download.IDownloadProgress
    name: IDownloadProgress
    nameWithType: IDownloadProgress
    fullName: Google.Apis.Download.IDownloadProgress
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: System.IProgress
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Apis.Download.IDownloadProgress
    name: IDownloadProgress
    nameWithType: IDownloadProgress
    fullName: Google.Apis.Download.IDownloadProgress
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.IProgress`1
  commentId: T:System.IProgress`1
  isExternal: true
  name: IProgress<T>
  nameWithType: IProgress<T>
  fullName: System.IProgress<T>
  nameWithType.vb: IProgress(Of T)
  fullName.vb: System.IProgress(Of T)
  name.vb: IProgress(Of T)
  spec.csharp:
  - uid: System.IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: System.IProgress
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: System.IProgress
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.DownloadLocatorToFileAsync*
  commentId: Overload:Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.DownloadLocatorToFileAsync
  name: DownloadLocatorToFileAsync
  nameWithType: CloudStorageClientExtensions.DownloadLocatorToFileAsync
  fullName: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.DownloadLocatorToFileAsync
- uid: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.GetLocatorSignedUrlAsync*
  commentId: Overload:Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.GetLocatorSignedUrlAsync
  name: GetLocatorSignedUrlAsync
  nameWithType: CloudStorageClientExtensions.GetLocatorSignedUrlAsync
  fullName: Mcma.GoogleCloud.Storage.Proxies.CloudStorageClientExtensions.GetLocatorSignedUrlAsync
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullName.vb: System.Nullable(Of System.TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Cloud.Storage.V1.SigningVersion
  commentId: T:Google.Cloud.Storage.V1.SigningVersion
  parent: Google.Cloud.Storage.V1
  isExternal: true
  name: SigningVersion
  nameWithType: SigningVersion
  fullName: Google.Cloud.Storage.V1.SigningVersion
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
