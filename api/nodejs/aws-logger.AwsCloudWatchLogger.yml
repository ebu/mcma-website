### YamlMime:UniversalReference
items:
  - uid: aws-logger.AwsCloudWatchLogger
    name: AwsCloudWatchLogger
    fullName: AwsCloudWatchLogger
    children:
      - aws-logger.AwsCloudWatchLogger.constructor
      - aws-logger.AwsCloudWatchLogger.debug
      - aws-logger.AwsCloudWatchLogger.error
      - aws-logger.AwsCloudWatchLogger.fatal
      - aws-logger.AwsCloudWatchLogger.functionEnd
      - aws-logger.AwsCloudWatchLogger.functionStart
      - aws-logger.AwsCloudWatchLogger.info
      - aws-logger.AwsCloudWatchLogger.jobEnd
      - aws-logger.AwsCloudWatchLogger.jobStart
      - aws-logger.AwsCloudWatchLogger.jobUpdate
      - aws-logger.AwsCloudWatchLogger.log
      - aws-logger.AwsCloudWatchLogger.System
      - aws-logger.AwsCloudWatchLogger.warn
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: Logger
    package: aws-logger
  - uid: aws-logger.AwsCloudWatchLogger.constructor
    name: >-
      AwsCloudWatchLogger((logEvent: LogEvent) => void, string, string,
      McmaTrackerProperties)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new AwsCloudWatchLogger(addLogEvent: (logEvent: LogEvent) => void,
        source: string, requestId?: string, tracker?: McmaTrackerProperties)
      parameters:
        - id: addLogEvent
          type:
            - '(logEvent: LogEvent) => void'
          description: ''
        - id: source
          type:
            - string
          description: ''
        - id: requestId
          type:
            - string
          description: ''
          optional: true
        - id: tracker
          type:
            - McmaTrackerProperties
          description: ''
          optional: true
    package: aws-logger
  - uid: aws-logger.AwsCloudWatchLogger.debug
    name: 'debug(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function debug(message: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: aws-logger
  - uid: aws-logger.AwsCloudWatchLogger.error
    name: 'error(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function error(message: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: aws-logger
  - uid: aws-logger.AwsCloudWatchLogger.fatal
    name: 'fatal(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function fatal(message: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: aws-logger
  - uid: aws-logger.AwsCloudWatchLogger.functionEnd
    name: 'functionEnd(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function functionEnd(message: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: aws-logger
  - uid: aws-logger.AwsCloudWatchLogger.functionStart
    name: 'functionStart(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function functionStart(message: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: aws-logger
  - uid: aws-logger.AwsCloudWatchLogger.info
    name: 'info(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function info(message: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: aws-logger
  - uid: aws-logger.AwsCloudWatchLogger.jobEnd
    name: 'jobEnd(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function jobEnd(message: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: aws-logger
  - uid: aws-logger.AwsCloudWatchLogger.jobStart
    name: 'jobStart(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function jobStart(message: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: aws-logger
  - uid: aws-logger.AwsCloudWatchLogger.jobUpdate
    name: 'jobUpdate(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function jobUpdate(message: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: aws-logger
  - uid: aws-logger.AwsCloudWatchLogger.log
    name: 'log(number, string, any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function log(level: number, type: string, message: any, optionalParams:
        any[])
      parameters:
        - id: level
          type:
            - number
          description: ''
        - id: type
          type:
            - string
          description: ''
        - id: message
          type:
            - any
          description: ''
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: aws-logger
  - uid: aws-logger.AwsCloudWatchLogger.System
    name: System
    fullName: System
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static System: Logger'
      return:
        type:
          - Logger
        description: ''
    package: aws-logger
  - uid: aws-logger.AwsCloudWatchLogger.warn
    name: 'warn(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function warn(message: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: aws-logger
