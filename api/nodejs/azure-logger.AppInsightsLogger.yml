### YamlMime:UniversalReference
items:
  - uid: azure-logger.AppInsightsLogger
    name: AppInsightsLogger
    fullName: AppInsightsLogger
    children:
      - azure-logger.AppInsightsLogger.constructor
      - azure-logger.AppInsightsLogger.debug
      - azure-logger.AppInsightsLogger.error
      - azure-logger.AppInsightsLogger.fatal
      - azure-logger.AppInsightsLogger.functionEnd
      - azure-logger.AppInsightsLogger.functionStart
      - azure-logger.AppInsightsLogger.info
      - azure-logger.AppInsightsLogger.jobEnd
      - azure-logger.AppInsightsLogger.jobStart
      - azure-logger.AppInsightsLogger.jobUpdate
      - azure-logger.AppInsightsLogger.log
      - azure-logger.AppInsightsLogger.System
      - azure-logger.AppInsightsLogger.warn
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: Logger
    package: azure-logger
  - uid: azure-logger.AppInsightsLogger.constructor
    name: 'AppInsightsLogger(TelemetryClient, string, string, McmaTrackerProperties)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new AppInsightsLogger(appInsightsClient: TelemetryClient, source:
        string, requestId?: string, tracker?: McmaTrackerProperties)
      parameters:
        - id: appInsightsClient
          type:
            - TelemetryClient
          description: ''
        - id: source
          type:
            - string
          description: ''
        - id: requestId
          type:
            - string
          description: ''
          optional: true
        - id: tracker
          type:
            - McmaTrackerProperties
          description: ''
          optional: true
    package: azure-logger
  - uid: azure-logger.AppInsightsLogger.debug
    name: 'debug(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function debug(message: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: azure-logger
  - uid: azure-logger.AppInsightsLogger.error
    name: 'error(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function error(message: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: azure-logger
  - uid: azure-logger.AppInsightsLogger.fatal
    name: 'fatal(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function fatal(message: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: azure-logger
  - uid: azure-logger.AppInsightsLogger.functionEnd
    name: 'functionEnd(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function functionEnd(message: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: azure-logger
  - uid: azure-logger.AppInsightsLogger.functionStart
    name: 'functionStart(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function functionStart(message: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: azure-logger
  - uid: azure-logger.AppInsightsLogger.info
    name: 'info(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function info(message: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: azure-logger
  - uid: azure-logger.AppInsightsLogger.jobEnd
    name: 'jobEnd(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function jobEnd(message: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: azure-logger
  - uid: azure-logger.AppInsightsLogger.jobStart
    name: 'jobStart(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function jobStart(message: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: azure-logger
  - uid: azure-logger.AppInsightsLogger.jobUpdate
    name: 'jobUpdate(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function jobUpdate(message: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: azure-logger
  - uid: azure-logger.AppInsightsLogger.log
    name: 'log(number, string, any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function log(level: number, type: string, message: any, optionalParams:
        any[])
      parameters:
        - id: level
          type:
            - number
          description: ''
        - id: type
          type:
            - string
          description: ''
        - id: message
          type:
            - any
          description: ''
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: azure-logger
  - uid: azure-logger.AppInsightsLogger.System
    name: System
    fullName: System
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static System: Logger'
      return:
        type:
          - Logger
        description: ''
    package: azure-logger
  - uid: azure-logger.AppInsightsLogger.warn
    name: 'warn(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function warn(message: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: azure-logger
